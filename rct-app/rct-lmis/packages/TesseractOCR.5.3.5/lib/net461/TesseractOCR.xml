<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TesseractOCR</name>
    </assembly>
    <members>
        <member name="P:TesseractOCR.DisposableBase.IsDisposed">
            <summary>
                Returns <c>true</c> when this object is disposed
            </summary>
        </member>
        <member name="T:TesseractOCR.ElementProperties">
            <summary>
                Describes the element properties at the current <see cref="T:TesseractOCR.Enums.PageIteratorLevel"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.ElementProperties.Orientation">
            <summary>
                Returns the <see cref="P:TesseractOCR.ElementProperties.Orientation" />
            </summary>
        </member>
        <member name="P:TesseractOCR.ElementProperties.TextLineOrder">
            <summary>
                Returns the <see cref="P:TesseractOCR.ElementProperties.TextLineOrder" />
            </summary>
        </member>
        <member name="P:TesseractOCR.ElementProperties.WritingDirection">
            <summary>
                Returns the <see cref="P:TesseractOCR.ElementProperties.WritingDirection" />
            </summary>
        </member>
        <member name="P:TesseractOCR.ElementProperties.DeskewAngle">
            <summary>
                Returns the angle the page would need to be rotated to deskew the information
            </summary>
        </member>
        <member name="M:TesseractOCR.ElementProperties.#ctor(TesseractOCR.Enums.Orientation,TesseractOCR.Enums.TextLineOrder,TesseractOCR.Enums.WritingDirection,System.Single)">
            <summary>
                The information for the element at the current <see cref="T:TesseractOCR.Enums.PageIteratorLevel"/>
            </summary>
            <param name="orientation"><see cref="P:TesseractOCR.ElementProperties.Orientation"/></param>
            <param name="textLineOrder"><see cref="P:TesseractOCR.ElementProperties.TextLineOrder"/></param>
            <param name="writingDirection"><see cref="P:TesseractOCR.ElementProperties.WritingDirection"/></param>
            <param name="deskewAngle"><see cref="P:TesseractOCR.ElementProperties.DeskewAngle"/></param>
        </member>
        <member name="T:TesseractOCR.Engine">
            <summary>
                The tesseract OCR engine
            </summary>
        </member>
        <member name="P:TesseractOCR.Engine.Version">
            <summary>
                Returns the Tesseract version
            </summary>
        </member>
        <member name="P:TesseractOCR.Engine.DefaultPageSegMode">
            <summary>
                Gets or sets default <see cref="T:TesseractOCR.Enums.PageSegMode" /> mode used by one of the Process methods
            </summary>
        </member>
        <member name="P:TesseractOCR.Engine.CurrentEngineMode">
            <summary>
                Returns the current engine mode
            </summary>
        </member>
        <member name="P:TesseractOCR.Engine.InitLanguage">
            <summary>
                Returns the <see cref="T:TesseractOCR.Enums.Language"/> used in the last valid initialization
            </summary>
        </member>
        <member name="P:TesseractOCR.Engine.DataPath">
            <summary>
                Returns the data path
            </summary>
        </member>
        <member name="P:TesseractOCR.Engine.LoadedLanguages">
            <summary>
                Returns a list of loaded <see cref="T:TesseractOCR.Enums.Language"/>'s
            </summary>
        </member>
        <member name="P:TesseractOCR.Engine.AvailableLanguages">
            <summary>
                Returns a list of available <see cref="T:TesseractOCR.Enums.Language"/>'s
            </summary>
        </member>
        <member name="M:TesseractOCR.Engine.#ctor(System.String,TesseractOCR.Enums.Language,TesseractOCR.Enums.EngineMode,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,Microsoft.Extensions.Logging.ILogger)">
            <summary>
                Creates a new instance of <see cref="T:TesseractOCR.Engine" /> with the specified <paramref name="engineMode" /> and
                <paramref name="configFiles" />.
            </summary>
            <remarks>
                <para>
                    The <paramref name="dataPath" /> parameter should point to the directory that contains the 'tessdata' folder
                    for example if your tesseract language data is installed in <c>C:\Tesseract\tessdata</c> the value of datapath
                    should
                    be <c>C:\Tesseract</c>. Note that tesseract will use the value of the <c>TESSDATA_PREFIX</c> environment
                    variable if defined,
                    effectively ignoring the value of <paramref name="dataPath" /> parameter.
                </para>
            </remarks>
            <param name="dataPath">
                The path to the parent directory that contains the 'tessdata' directory, ignored if the
                <c>TESSDATA_PREFIX</c> environment variable is defined.
            </param>
            <param name="language">The <see cref="T:TesseractOCR.Enums.Language"/> to load</param>
            <param name="engineMode">The <see cref="T:TesseractOCR.Enums.EngineMode" /> value to use when initializing the tesseract engine</param>
            <param name="configFiles">
                An optional sequence of tesseract configuration files to load, encoded using UTF8 without BOM
                with Unix end of line characters you can use an advanced text editor such as Notepad++ to accomplish this.
            </param>
            <param name="initialOptions"></param>
            <param name="setOnlyNonDebugVariables"></param>
            <param name="logger">When set then logging is written to this <see cref="T:Microsoft.Extensions.Logging.ILogger"/> interface</param>
        </member>
        <member name="M:TesseractOCR.Engine.#ctor(System.String,System.Collections.Generic.List{TesseractOCR.Enums.Language},TesseractOCR.Enums.EngineMode,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,Microsoft.Extensions.Logging.ILogger)">
            <summary>
                Creates a new instance of <see cref="T:TesseractOCR.Engine" /> with the specified <paramref name="engineMode" /> and
                <paramref name="configFiles" />.
            </summary>
            <remarks>
                <para>
                    The <paramref name="dataPath" /> parameter should point to the directory that contains the 'tessdata' folder
                    for example if your tesseract language data is installed in <c>C:\Tesseract\tessdata</c> the value of datapath
                    should
                    be <c>C:\Tesseract</c>. Note that tesseract will use the value of the <c>TESSDATA_PREFIX</c> environment
                    variable if defined,
                    effectively ignoring the value of <paramref name="dataPath" /> parameter.
                </para>
            </remarks>
            <param name="dataPath">
                The path to the parent directory that contains the 'tessdata' directory, ignored if the
                <c>TESSDATA_PREFIX</c> environment variable is defined.
            </param>
            <param name="languages">The <see cref="T:TesseractOCR.Enums.Language"/>s to load</param>
            <param name="engineMode">The <see cref="T:TesseractOCR.Enums.EngineMode" /> value to use when initializing the tesseract engine</param>
            <param name="configFiles">
                An optional sequence of tesseract configuration files to load, encoded using UTF8 without BOM
                with Unix end of line characters you can use an advanced text editor such as Notepad++ to accomplish this.
            </param>
            <param name="initialValues"></param>
            <param name="setOnlyNonDebugVariables"></param>
            <param name="logger">When set then logging is written to this <see cref="T:Microsoft.Extensions.Logging.ILogger"/> interface</param>
        </member>
        <member name="M:TesseractOCR.Engine.#ctor(System.String,System.String,TesseractOCR.Enums.EngineMode,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,Microsoft.Extensions.Logging.ILogger)">
            <summary>
                Creates a new instance of <see cref="T:TesseractOCR.Engine" /> with the specified <paramref name="engineMode" /> and
                <paramref name="configFiles" />.
            </summary>
            <remarks>
                <para>
                    The <paramref name="dataPath" /> parameter should point to the directory that contains the 'tessdata' folder
                    for example if your tesseract language data is installed in <c>C:\Tesseract\tessdata</c> the value of datapath
                    should
                    be <c>C:\Tesseract</c>. Note that tesseract will use the value of the <c>TESSDATA_PREFIX</c> environment
                    variable if defined,
                    effectively ignoring the value of <paramref name="dataPath" /> parameter.
                </para>
            </remarks>
            <param name="dataPath">
                The path to the parent directory that contains the 'tessdata' directory, ignored if the
                <c>TESSDATA_PREFIX</c> environment variable is defined.
            </param>
            <param name="languages">The languages to load, e.g. eng, or eng+nld if you want to load more then one language</param>
            <param name="engineMode">The <see cref="T:TesseractOCR.Enums.EngineMode" /> value to use when initializing the tesseract engine</param>
            <param name="configFiles">
                An optional sequence of tesseract configuration files to load, encoded using UTF8 without BOM
                with Unix end of line characters you can use an advanced text editor such as Notepad++ to accomplish this.
            </param>
            <param name="initialValues"></param>
            <param name="setOnlyNonDebugVariables"></param>
            <param name="logger">When set then logging is written to this <see cref="T:Microsoft.Extensions.Logging.ILogger"/> interface</param>
        </member>
        <member name="M:TesseractOCR.Engine.Process(TesseractOCR.Pix.Image,System.Nullable{TesseractOCR.Enums.PageSegMode})">
            <summary>
                Processes the specific image.
            </summary>
            <remarks>
                You can only have one result iterator open at any one time.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="pageSegMode">The page layout analysis method to use.</param>
        </member>
        <member name="M:TesseractOCR.Engine.Process(TesseractOCR.Pix.Image,TesseractOCR.Rect,System.Nullable{TesseractOCR.Enums.PageSegMode})">
            <summary>
                Processes a specified region in the image using the specified page layout analysis mode.
            </summary>
            <remarks>
                You can only have one result iterator open at any one time.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="region">The image region to process.</param>
            <param name="pageSegMode">The page layout analysis method to use.</param>
            <returns>A result iterator</returns>
        </member>
        <member name="M:TesseractOCR.Engine.Process(TesseractOCR.Pix.Image,System.String,System.Nullable{TesseractOCR.Enums.PageSegMode})">
            <summary>
                Processes the specific image.
            </summary>
            <remarks>
                You can only have one result iterator open at any one time.
            </remarks>
            <param name="image">The image to process.</param>
            <param name="inputName">Sets the input file's name, only needed for training or loading a uzn file.</param>
            <param name="pageSegMode">The page layout analysis method to use.</param>
        </member>
        <member name="M:TesseractOCR.Engine.Process(TesseractOCR.Pix.Image,System.String,TesseractOCR.Rect,System.Nullable{TesseractOCR.Enums.PageSegMode})">
            <summary>
                Processes a specified region in the image using the specified page layout analysis mode
            </summary>
            <remarks>
                You can only have one result iterator open at any one time.
            </remarks>
            <param name="image">The image to process</param>
            <param name="inputName">Sets the input file's name, only needed for training or loading a uzn file</param>
            <param name="region">The image region to process</param>
            <param name="pageSegMode">The page layout analysis method to use.</param>
            <returns>A result iterator</returns>
        </member>
        <member name="M:TesseractOCR.Engine.Initialize(System.String,System.Collections.Generic.List{TesseractOCR.Enums.Language},TesseractOCR.Enums.EngineMode,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,Microsoft.Extensions.Logging.ILogger)">
            <summary>
                Initializes the Tesseract engine
            </summary>
            <param name="dataPath">
                The path to the parent directory that contains the 'tessdata' directory, ignored if the
                <c>TESSDATA_PREFIX</c> environment variable is defined.
            </param>
            <param name="languages">The languages to load, e.g. eng, or eng+nld if you want to load more then one language</param>
            <param name="engineMode">The <see cref="T:TesseractOCR.Enums.EngineMode" /> value to use when initializing the tesseract engine</param>
            <param name="configFiles">
                An optional sequence of tesseract configuration files to load, encoded using UTF8 without BOM
                with Unix end of line characters you can use an advanced text editor such as Notepad++ to accomplish this.
            </param>
            <param name="initialValues"></param>
            <param name="setOnlyNonDebugVariables"></param>
            <param name="logger">When set then logging is written to this <see cref="T:Microsoft.Extensions.Logging.ILogger"/> interface</param>
            <exception cref="T:TesseractOCR.Exceptions.TesseractException"></exception>
        </member>
        <member name="M:TesseractOCR.Engine.Initialize(System.String,System.String,TesseractOCR.Enums.EngineMode,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,Microsoft.Extensions.Logging.ILogger)">
            <summary>
                Initializes the Tesseract engine
            </summary>
            <param name="dataPath">
                The path to the parent directory that contains the 'tessdata' directory, ignored if the
                <c>TESSDATA_PREFIX</c> environment variable is defined.
            </param>
            <param name="languages">The languages to load, e.g. eng, or eng+nld if you want to load more then one language</param>
            <param name="engineMode">The <see cref="T:TesseractOCR.Enums.EngineMode" /> value to use when initializing the tesseract engine</param>
            <param name="configFiles">
                An optional sequence of tesseract configuration files to load, encoded using UTF8 without BOM
                with Unix end of line characters you can use an advanced text editor such as Notepad++ to accomplish this.
            </param>
            <param name="initialValues"></param>
            <param name="setOnlyNonDebugVariables"></param>
            <param name="logger">When set then logging is written to this <see cref="T:Microsoft.Extensions.Logging.ILogger"/> interface</param>
            <exception cref="T:TesseractOCR.Exceptions.TesseractException"></exception>
        </member>
        <member name="M:TesseractOCR.Engine.ClearAdaptiveClassifier">
            <summary>
                Call between pages or documents etc to free up memory and forget adaptive data
            </summary>
        </member>
        <member name="M:TesseractOCR.Engine.ClearPersistentCache">
            <summary>
                Clear any library-level memory caches. There are a variety of expensive-to-load constant data structures
                (mostly language dictionaries) that are cached globally -- surviving the Init() and End() of individual TessBaseAPI's.
                This function allows the clearing of these caches
            </summary>
        </member>
        <member name="M:TesseractOCR.Engine.SetDebugVariable(System.String,System.String)">
            <summary>
                Sets a debug variable.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Engine.SetVariable(System.String,System.String)">
            <summary>
                Sets the value of a string variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The new value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:TesseractOCR.Engine.SetVariable(System.String,System.Boolean)">
            <summary>
                Sets the value of a boolean variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The new value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:TesseractOCR.Engine.SetVariable(System.String,System.Int32)">
            <summary>
                Sets the value of a integer variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The new value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:TesseractOCR.Engine.SetVariable(System.String,System.Double)">
            <summary>
                Sets the value of a double variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The new value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:TesseractOCR.Engine.TryGetBoolVariable(System.String,System.Boolean@)">
            <summary>
                Attempts to retrieve the value for a boolean variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The current value of the variable.</param>
            <returns><c>true</c> if successful, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:TesseractOCR.Engine.TryGetDoubleVariable(System.String,System.Double@)">
            <summary>
                Attempts to retrieve the value for a double variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The current value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:TesseractOCR.Engine.TryGetIntVariable(System.String,System.Int32@)">
            <summary>
                Attempts to retrieve the value for an integer variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The current value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:TesseractOCR.Engine.TryGetStringVariable(System.String,System.String@)">
            <summary>
                Attempts to retrieve the value for a string variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The current value of the variable.</param>
            <returns>Returns <c>True</c> if successful; otherwise <c>False</c>.</returns>
        </member>
        <member name="M:TesseractOCR.Engine.TryPrintVariablesToFile(System.String)">
            <summary>
                Attempts to print the variables to the file.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Engine.Dispose(System.Boolean)">
            <summary>
                Disposes this object
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:TesseractOCR.Enums.EngineMode">
            <summary>
                The Tesseract engine mode
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.EngineMode.TesseractOnly">
            <summary>
                Only the legacy tesseract OCR engine is used.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.EngineMode.LstmOnly">
            <summary>
                Only the new LSTM-based OCR engine is used.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.EngineMode.TesseractAndLstm">
            <summary>
                Both the legacy and new LSTM based OCR engine is used.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.EngineMode.Default">
            <summary>
                The default OCR engine is used (currently LSTM-based OCR engine).
            </summary>
        </member>
        <member name="T:TesseractOCR.Enums.ImageFormat">
            <summary>
            	The image format
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.Unknown">
            <summary>
            	The image format is unknown
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.Bmp">
            <summary>
            	The image format is BMP
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.JfifJpeg">
            <summary>
            	The image format is JPG
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.Png">
            <summary>
            	The image format is PNG
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.Tiff">
            <summary>
            	The image format is TIFF
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.TiffPackBits">
            <summary>
            	The image format is TIFF pack bits
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.TiffRle">
            <summary>
            	The image format is TIFF RLE
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.TiffG3">
            <summary>
            	The image format is TIFF with G3 fax compression
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.TiffG4">
            <summary>
            	The image format is TIFF with G4 fax compression
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.TiffLzw">
            <summary>
            	The image format is TIFF with LZW compression
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.TifZip">
            <summary>
            	The image format is TIFF with ZIP compression
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.Pnm">
            <summary>
            	The image format is PNM
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.Ps">
            <summary>
            	The image format is postscript
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.Gif">
            <summary>
            	The image format is GIF
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.Jp2">
            <summary>
            	The image format is JP2
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.WebP">
            <summary>
            	The image format is WebP
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.Lpdf">
            <summary>
            	The image format is LPDF
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.Default">
            <summary>
            	Default format
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ImageFormat.Spix">
            <summary>
            	The image format is SPIX
            </summary>
        </member>
        <member name="T:TesseractOCR.Enums.Language">
            <summary>
                All the available Tesseract languages
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Unknown">
            <summary>
                The language is unknown
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Afrikaans">
            <summary>
                Afrikaans
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Amharic">
            <summary>
                Amharic
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Arabic">
            <summary>
                Arabic
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Assamese">
            <summary>
                Assamese
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Azerbaijani">
            <summary>
                Azerbaijani
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.AzerbaijaniCyrilic">
            <summary>
                Azerbaijani - Cyrilic
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Belarusian">
            <summary>
                Belarusian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Bengali">
            <summary>
                Bengali
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Tibetan">
            <summary>
                Tibetan
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Bosnian">
            <summary>
                Bosnian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Breton">
            <summary>
                Breton
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Bulgarian">
            <summary>
                Bulgarian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.CatalanValencian">
            <summary>
                Catalan; Valencian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Cebuano">
            <summary>
                Cebuano
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Czech">
            <summary>
                Czech
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.ChineseSimplified">
            <summary>
                Chinese - Simplified
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.ChineseTraditional">
            <summary>
                Chinese - Traditional
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Cherokee">
            <summary>
                Cherokee
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Corsican">
            <summary>
                Corsican
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Welsh">
            <summary>
                Welsh
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Danish">
            <summary>
                Danish
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.DanishFraktur">
            <summary>
                Danish - Fraktur (contrib)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.German">
            <summary>
                German
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.GermanFrakturContrib">
            <summary>
                German - Fraktur (contrib)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Dzongkha">
            <summary>
                Dzongkha
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.GreekModern">
            <summary>
                Greek, Modern (1453-)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.English">
            <summary>
                English
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.EnglishMiddle">
            <summary>
                English, Middle (1100-1500)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Esperanto">
            <summary>
                Esperanto
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Math">
            <summary>
                Math / equation detection module
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Estonian">
            <summary>
                Estonian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Basque">
            <summary>
                Basque
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Faroese">
            <summary>
                Faroese
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Persian">
            <summary>
                Persian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Filipino">
            <summary>
                Filipino (old - Tagalog)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Finnish">
            <summary>
                Finnish
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.French">
            <summary>
                French
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.GermanFraktur">
            <summary>
                German - Fraktur
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.FrenchMiddle">
            <summary>
                French, Middle (ca.1400-1600)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.WesternFrisian">
            <summary>
                Western Frisian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.ScottishGaelic">
            <summary>
                Scottish Gaelic
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Irish">
            <summary>
                Irish
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Galician">
            <summary>
                Galician
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.GreekAncientContrib">
            <summary>
                Greek, Ancient (to 1453) (contrib)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Gujarati">
            <summary>
                Gujarati
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Haitian">
            <summary>
                Haitian; Haitian Creole
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Hebrew">
            <summary>
                Hebrew
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Hindi">
            <summary>
                Hindi
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Croatian">
            <summary>
                Croatian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Hungarian">
            <summary>
                Hungarian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Armenian">
            <summary>
                Armenian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Inuktitut">
            <summary>
                Inuktitut
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Indonesian">
            <summary>
                Indonesian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Icelandic">
            <summary>
                Icelandic
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Italian">
            <summary>
                Italian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.ItalianOld">
            <summary>
                Italian - Old
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Javanese">
            <summary>
                Javanese
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Japanese">
            <summary>
                Japanese
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.JapaneseVertical">
            <summary>
                Japanese (vertical)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Kannada">
            <summary>
                Kannada
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Georgian">
            <summary>
                Georgian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.GeorgianOld">
            <summary>
                Georgian - Old
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Kazakh">
            <summary>
                Kazakh
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.CentralKhmer">
            <summary>
                Central Khmer
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.KirghizKyrgyz">
            <summary>
                Kirghiz; Kyrgyz
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Kurmanji">
            <summary>
                Kurmanji (Kurdish - Latin Script)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Korean">
            <summary>
                Korean
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.KoreanVertical">
            <summary>
                Korean (vertical)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.KurdishArabicScript">
            <summary>
                Kurdish (Arabic Script)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Lao">
            <summary>
                Lao
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Latin">
            <summary>
                Latin
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Latvian">
            <summary>
                Latvian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Lithuanian">
            <summary>
                Lithuanian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Luxembourgish">
            <summary>
                Luxembourgish
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Malayalam">
            <summary>
                Malayalam
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Marathi">
            <summary>
                Marathi
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Macedonian">
            <summary>
                Macedonian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Maltese">
            <summary>
                Maltese
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Mongolian">
            <summary>
                Mongolian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Maori">
            <summary>
                Maori
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Malay">
            <summary>
                Malay
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Burmese">
            <summary>
                Burmese
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Nepali">
            <summary>
                Nepali
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Dutch">
            <summary>
                Dutch; Flemish
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Norwegian">
            <summary>
                Norwegian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Occitan">
            <summary>
                Occitan (post 1500)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Oriya">
            <summary>
                Oriya
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Osd">
            <summary>
                Orientation and script detection module
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Panjabi">
            <summary>
                Panjabi; Punjabi
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Polish">
            <summary>
                Polish
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Portuguese">
            <summary>
                Portuguese
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Pushto">
            <summary>
                Pushto; Pashto
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Quechua">
            <summary>
                Quechua
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Romanian">
            <summary>
                Romanian; Moldavian; Moldovan
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Russian">
            <summary>
                Russian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Sanskrit">
            <summary>
                Sanskrit
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Sinhala">
            <summary>
                Sinhala; Sinhalese
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Slovak">
            <summary>
                Slovak
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.SlovakFrakturContrib">
            <summary>
                Slovak - Fraktur (contrib)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Slovenian">
            <summary>
                Slovenian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Sindhi">
            <summary>
                Sindhi
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.SpanishCastilian">
            <summary>
                Spanish; Castilian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.SpanishCastilianOld">
            <summary>
                Spanish; Castilian - Old
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Albanian">
            <summary>
                Albanian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Serbian">
            <summary>
                Serbian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.SerbianLatin">
            <summary>
                Serbian - Latin
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Sundanese">
            <summary>
                Sundanese
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Swahili">
            <summary>
                Swahili
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Swedish">
            <summary>
                Swedish
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Syriac">
            <summary>
                Syriac
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Tamil">
            <summary>
                Tamil
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Tatar">
            <summary>
                Tatar
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Telugu">
            <summary>
                Telugu
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Tajik">
            <summary>
                Tajik
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Tagalog">
            <summary>
                Tagalog (new - Filipino)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Thai">
            <summary>
                Thai
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Tigrinya">
            <summary>
                Tigrinya
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Tonga">
            <summary>
                Tonga
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Turkish">
            <summary>
                Turkish
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Uighur">
            <summary>
                Uighur; Uyghur
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Ukrainian">
            <summary>
                Ukrainian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Urdu">
            <summary>
                Urdu
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Uzbek">
            <summary>
                Uzbek
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.UzbekCyrilic">
            <summary>
                Uzbek - Cyrilic
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Vietnamese">
            <summary>
                Vietnamese
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Yiddish">
            <summary>
                Yiddish
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Language.Yoruba">
            <summary>
                Yoruba
            </summary>
        </member>
        <member name="T:TesseractOCR.Enums.LanguageHelper">
            <summary>
                A helper class for working with the <see cref="T:TesseractOCR.Enums.Language"/>
            </summary>
        </member>
        <member name="M:TesseractOCR.Enums.LanguageHelper.StringToEnum(System.String)">
            <summary>
                Returns the <see cref="T:TesseractOCR.Enums.Language"/> enum that has the <see cref="T:TesseractOCR.Enums.StringAttribute"/>
                with the corresponding <paramref name="languageString"/>
            </summary>
            <param name="languageString">The language string</param>
            <returns><see cref="T:TesseractOCR.Enums.Language"/></returns>
        </member>
        <member name="M:TesseractOCR.Enums.LanguageHelper.EnumToString(TesseractOCR.Enums.Language)">
            <summary>
                Returns the <see cref="T:TesseractOCR.Enums.StringAttribute"/> for the given <paramref name="language"/> enum
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Enums.LanguageHelper.GetAttributeOfType``1(System.Enum)">
            <summary>
                Gets an attribute on an enum field value
            </summary>
            <typeparam name="T">The type of the attribute you want to retrieve</typeparam>
            <param name="enumVal">The enum value</param>
            <returns>The attribute of type T that exists on the enum value</returns>
            <example>
                <code>
                    var value = enum.GetAttributeOfType&lt;StringAttribute>().Value;&gt;
                </code>
            </example>
        </member>
        <member name="T:TesseractOCR.Enums.Orientation">
            <summary>
                Represents orientation that the page would need to be rotated so that .
            </summary>
            <remarks>
                Orientation is defined as to what side of the page would need to correspond to the 'up' direction such that the
                characters will
                be read able. Another way of looking at this what direction you need to rotate you head so that "up" aligns with
                Orientation,
                then the characters will appear "right side up" and readable.
                In short:
                <list type="bullet">
                    <item>PageUp - Page is correctly aligned with up and no rotation is needed.</item>
                    <item>
                        PageRight - Page needs to be rotated so the right hand side is up, 90 degrees counter clockwise, to be
                        readable.
                    </item>
                    <item>
                        PageDown - Page needs to be rotated so the bottom side is up, 180 degrees counter clockwise, to be
                        readable.
                    </item>
                    <item>PageLeft - Page needs to be rotated so the left hand side is up, 90 degrees clockwise, to be readable.</item>
                </list>
            </remarks>
        </member>
        <member name="F:TesseractOCR.Enums.Orientation.PageUp">
            <summary>
                Page is correctly aligned with up and no rotation is needed.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Orientation.PageRight">
            <summary>
                Page needs to be rotated so the right hand side is up, 90 degrees counter clockwise, to be readable.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Orientation.PageDown">
            <summary>
                Page needs to be rotated so the bottom side is up, 180 degrees counter clockwise, to be readable.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.Orientation.PageLeft">
            <summary>
                Page needs to be rotated so the left hand side is up, 90 degrees clockwise, to be readable.
            </summary>
        </member>
        <member name="T:TesseractOCR.Enums.PageIteratorLevel">
            <summary>
            	The page iterator level
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageIteratorLevel.Block">
            <summary>
            	Block
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageIteratorLevel.Paragraph">
            <summary>
            	Paragraph
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageIteratorLevel.TextLine">
            <summary>
            	Text line
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageIteratorLevel.Word">
            <summary>
            	Word
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageIteratorLevel.Symbol">
            <summary>
            	Symbol
            </summary>
        </member>
        <member name="T:TesseractOCR.Enums.PageSegMode">
            <summary>
                Represents the possible page layout analysis modes.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.OsdOnly">
            <summary>
                Orientation and script detection (OSD) only.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.AutoOsd">
            <summary>
                Automatic page segmentation with orientation and script detection (OSD).
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.AutoOnly">
            <summary>
                Automatic page segmentation, but no OSD, or OCR.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.Auto">
            <summary>
                Fully automatic page segmentation, but no OSD.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.SingleColumn">
            <summary>
                Assume a single column of text of variable sizes.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.SingleBlockVertText">
            <summary>
                Assume a single uniform block of vertically aligned text.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.SingleBlock">
            <summary>
                Assume a single uniform block of text.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.SingleLine">
            <summary>
                Treat the image as a single text line.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.SingleWord">
            <summary>
                Treat the image as a single word.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.CircleWord">
            <summary>
                Treat the image as a single word in a circle.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.SingleChar">
            <summary>
                Treat the image as a single character.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.SparseText">
            <summary>
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.SparseTextOsd">
            <summary>
                Sparse text with orientation and script detection.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.RawLine">
            <summary>
                Treat the image as a single text line, bypassing hacks that are
                specific to Tesseract.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PageSegMode.Count">
            <summary>
                Number of enum entries.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ParagraphJustification.Unknown">
            <summary>
                The alignment is not clearly one of the other options. This could happen for example
                if there are only one or two lines of text or the text looks like source code or poetry
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ParagraphJustification.Left">
            <summary>
                Each line, except possibly the first, is flush to the same left tab stop
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ParagraphJustification.Center">
            <summary>
                The text lines of the paragraph are centered about a line going down through their middle of the text lines
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ParagraphJustification.Right">
            <summary>
                Each line, except possibly the first, is flush to the same right tab stop
            </summary>
        </member>
        <member name="T:TesseractOCR.Enums.PixArrayAccessType">
            <summary>
                Determines how <see cref="N:TesseractOCR.Pix" /> of a <see cref="!:PixArray" /> structure are accessed.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PixArrayAccessType.Insert">
            <summary>
                Stuff it in; no copy, clone or copy-clone.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PixArrayAccessType.Copy">
            <summary>
                Make/use a copy of the object.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PixArrayAccessType.Clone">
            <summary>
                Make/use clone (ref count) of the object
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PixArrayAccessType.CopyClone">
            <summary>
                Make a new object and fill with with clones of each object in the array(s)
            </summary>
        </member>
        <member name="T:TesseractOCR.Enums.PolyBlockType">
            <summary>
                The poly block type
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.Unknown">
            <summary>
                The type is not known yet, keep as first element
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.FlowingText">
            <summary>
                The text is inside a column
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.HeadingText">
            <summary>
                The text spans more than one column
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.PullOutText">
            <summary>
                The text is in a cross-column pull-out region
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.Equation">
            <summary>
                The portion belongs to an equation region
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.InlineEquation">
            <summary>
                The partition has an inline equation
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.Table">
            <summary>
                The partition belongs to a Table region
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.VerticalText">
            <summary>
                Text line runs vertically
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.CaptionText">
            <summary>
                Text that belongs to an image
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.FlowingImage">
            <summary>
                Image that lives inside a column
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.HeadingImage">
            <summary>
                Image that spans more than one column
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.PullOutImage">
            <summary>
                Image that is in a cross-column pull-out region
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.HorizontalLine">
            <summary>
                Horizontal Line
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.VerticalLine">
            <summary>
                Vertical Line
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.Noise">
            <summary>
                Lies outside any column.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.PolyBlockType.Count">
            <summary>
                Count
            </summary>
        </member>
        <member name="T:TesseractOCR.Enums.RenderFormat">
            <summary>
                Rendered formats supported by Tesseract.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RenderFormat.Text">
            <summary>
                To text
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RenderFormat.Hocr">
            <summary>
                To HOCR
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RenderFormat.Pdf">
            <summary>
                To PDF
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RenderFormat.PdfTextonly">
            <summary>
                A PDF with only an invisible text layer
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RenderFormat.Unlv">
            <summary>
                To UNLV
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RenderFormat.Box">
            <summary>
                To boxed
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RenderFormat.Alto">
            <summary>
                To alto
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RenderFormat.Tsv">
            <summary>
                To tsv
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RenderFormat.LstmBox">
            <summary>
                To LSTM box
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RenderFormat.WordStrBox">
            <summary>
                To word str box
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RotationDirection.Clockwise">
            <summary>
                With the clock
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RotationDirection.CounterClockwise">
            <summary>
                Against the clock
            </summary>
        </member>
        <member name="T:TesseractOCR.Enums.RotationFill">
            <summary>
                What color pixels should be used for the outside?
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RotationFill.White">
            <summary>
                Bring in white pixels from the outside.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RotationFill.Black">
            <summary>
                Bring in black pixels from the outside.
            </summary>
        </member>
        <member name="T:TesseractOCR.Enums.RotationMethod">
            <summary>
                Represents the method used to rotate an image.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RotationMethod.AreaMap">
            <summary>
                Use area map rotation, if possible.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RotationMethod.Shear">
            <summary>
                Use shear rotation.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.RotationMethod.Sampling">
            <summary>
                Use sampling.
            </summary>
        </member>
        <member name="T:TesseractOCR.Enums.ScriptName">
            <summary>
                All the available Tesseract scripts
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Unknown">
            <summary>
                Arabic
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Arabic">
            <summary>
                Arabic
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Armenian">
            <summary>
                Armenian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Bengali">
            <summary>
                Bengali
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.CanadianAboriginal">
            <summary>
                Canadian_Aboriginal
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Cherokee">
            <summary>
                Cherokee
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Cyrillic">
            <summary>
                Cyrillic
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Devanagari">
            <summary>
                Devanagari
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Ethiopic">
            <summary>
                Ethiopic
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Fraktur">
            <summary>
                Fraktur
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Georgian">
            <summary>
                Georgian
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Greek">
            <summary>
                Greek
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Gujarati">
            <summary>
                Gujarati
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Gurmukhi">
            <summary>
                Gurmukhi
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.HanS">
            <summary>
                HanS (Han simplified)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.HanSVert">
            <summary>
                HanS_vert (Han simplified vertical)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.HanT">
            <summary>
                HanT (Han traditional)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.HanTVert">
            <summary>
                HanT_vert (Han traditional vertical)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Hangul">
            <summary>
                Hangul
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.HangulVert">
            <summary>
                Hangul_vert (Hangul vertical)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Hebrew">
            <summary>
                Hebrew
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Japanese">
            <summary>
                Japanese
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.JapaneseVert">
            <summary>
                Japanese_vert (Japanese vertical)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Kannada">
            <summary>
                Kannada
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Khmer">
            <summary>
                Khmer
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Lao">
            <summary>
                Lao
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Latin">
            <summary>
                Latin
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Malayalam">
            <summary>
                Malayalam
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Myanmar">
            <summary>
                Myanmar
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Oriya">
            <summary>
                Oriya (Odia)
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Sinhala">
            <summary>
                Sinhala
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Syriac">
            <summary>
                Syriac
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Tamil">
            <summary>
                Tamil
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Telugu">
            <summary>
                Telugu
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Thaana">
            <summary>
                Thaana
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Thai">
            <summary>
                Thai
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Tibetan">
            <summary>
                Tibetan
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.ScriptName.Vietnamese">
            <summary>
                Vietnamese
            </summary>
        </member>
        <member name="T:TesseractOCR.Enums.ScriptNameHelper">
            <summary>
                A helper class to work with the <see cref="T:TesseractOCR.Enums.ScriptName"/>
            </summary>
        </member>
        <member name="M:TesseractOCR.Enums.ScriptNameHelper.StringToEnum(System.String)">
            <summary>
                Returns the <see cref="T:TesseractOCR.Enums.ScriptName"/> enum that has the <see cref="T:TesseractOCR.Enums.StringAttribute"/>
                with the corresponding <paramref name="scriptNameString"/>
            </summary>
            <param name="scriptNameString">The language string</param>
            <returns><see cref="T:TesseractOCR.Enums.Language"/></returns>
        </member>
        <member name="T:TesseractOCR.Enums.SelType">
            <summary>
            
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.SelType.SelDontCare">
            <summary>
            	Select and don't care
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.SelType.SelHit">
            <summary>
            	Select hits
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.SelType.SelMiss">
            <summary>
            	Select misses
            </summary>
        </member>
        <member name="T:TesseractOCR.Enums.TextLineOrder">
            <summary>
                The text lines are read in the given sequence.
            </summary>
            <remarks>
                <para>
                    For example in English the order is top-to-bottom. Chinese vertical text lines
                    are read right-to-left. While Mongolian is written in vertical columns
                    like Chinese but read left-to-right.
                </para>
                <para>
                    Note that only some combinations makes sense for example <see cref="F:TesseractOCR.Enums.WritingDirection.LeftToRight" /> implies
                    <see cref="F:TesseractOCR.Enums.TextLineOrder.TopToBottom" />.
                </para>
            </remarks>
        </member>
        <member name="F:TesseractOCR.Enums.TextLineOrder.LeftToRight">
            <summary>
                The text lines form vertical columns ordered left to right.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.TextLineOrder.RightToLeft">
            <summary>
                The text lines form vertical columns ordered right to left.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.TextLineOrder.TopToBottom">
            <summary>
                The text lines form horizontal columns ordered top to bottom.
            </summary>
        </member>
        <member name="T:TesseractOCR.Enums.WritingDirection">
            <summary>
                The grapheme cluster within a line of text are laid out logically in this direction,
                judged when looking at the text line rotated so that Orientation is "page up".
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.WritingDirection.LeftToRight">
            <summary>
                The text line from the left hand side to the right hand side when the page is rotated so it's orientation is
                <see cref="F:TesseractOCR.Enums.Orientation.PageUp" />.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.WritingDirection.RightToLeft">
            <summary>
                The text line from the right hand side to the left hand side when the page is rotated so it's orientation is
                <see cref="F:TesseractOCR.Enums.Orientation.PageUp" />.
            </summary>
        </member>
        <member name="F:TesseractOCR.Enums.WritingDirection.TopToBottom">
            <summary>
                The text line from the top to the bottom of the page when the page is rotated so it's orientation is
                <see cref="F:TesseractOCR.Enums.Orientation.PageUp" />.
            </summary>
        </member>
        <member name="T:TesseractOCR.Exceptions.TesseractException">
            <summary>
            Description of TesseractException.
            </summary>
        </member>
        <member name="T:TesseractOCR.Font.Attributes">
            <summary>
                This struct is the return type of ResultIterator.GetWordFontAttributes().
                We can't use FontInfo directly because there are properties here that are not
                accounted for in FontInfo (smallcaps, underline, etc.)  Because of the caching
                scheme we're using for FontInfo objects, we can't simply augment that class since
                these extra properties are not accounted for by the FontInfo's unique ID.
            </summary>
        </member>
        <member name="P:TesseractOCR.Font.Attributes.FontInfo">
            <summary>
                Returns the font information
            </summary>
        </member>
        <member name="P:TesseractOCR.Font.Attributes.IsUnderlined">
            <summary>
                Returns <c>true</c> when the text is underlined
            </summary>
        </member>
        <member name="P:TesseractOCR.Font.Attributes.IsSmallCaps">
            <summary>
                Returns <c>true</c> when the font is small caps
            </summary>
        </member>
        <member name="M:TesseractOCR.Font.Attributes.#ctor(TesseractOCR.Font.Info,System.Boolean,System.Boolean)">
            <summary>
                Creates this object and sets all it's needed properties
            </summary>
            <param name="fontInfo"></param>
            <param name="isUnderlined"></param>
            <param name="isSmallCaps"></param>
        </member>
        <member name="T:TesseractOCR.Font.Info">
            <summary>
                The .NET equivalent of the ccstruct/fontinfo.h
                FontInfo struct. It's missing spacing info
                since we don't have any way of getting it (and
                it's probably not all that useful anyway)
            </summary>
        </member>
        <member name="P:TesseractOCR.Font.Info.Name">
            <summary>
                Returns the name of the font
            </summary>
        </member>
        <member name="P:TesseractOCR.Font.Info.Id">
            <summary>
                Returns the id of the font
            </summary>
        </member>
        <member name="P:TesseractOCR.Font.Info.IsItalic">
            <summary>
                Returns <c>true</c> when the font is in italic
            </summary>
        </member>
        <member name="P:TesseractOCR.Font.Info.IsBold">
            <summary>
                Returns <c>true</c> when the font is bold
            </summary>
        </member>
        <member name="P:TesseractOCR.Font.Info.IsFixedPitch">
            <summary>
                Returns <c>true</c> when the font has a fixed pitch
            </summary>
        </member>
        <member name="P:TesseractOCR.Font.Info.IsSerif">
            <summary>
                Returns <c>true</c> when the font is serif
            </summary>
        </member>
        <member name="P:TesseractOCR.Font.Info.IsFraktur">
            <summary>
                Returns <c>true</c> when the font is fraktur
            </summary>
        </member>
        <member name="T:TesseractOCR.Font.Properties">
            <summary>
                Returns font properties
            </summary>
        </member>
        <member name="P:TesseractOCR.Font.Properties.PointSize">
            <summary>
                Returns the point size of the font
            </summary>
            <remarks>
                Point size is returned in printers points (1/72 inch)
            </remarks>
        </member>
        <member name="P:TesseractOCR.Font.Properties.Attributes">
            <summary>
                Returns other font attributes
            </summary>
            <remarks>
                This information is only available when using older engine modes like
                <see cref="F:TesseractOCR.Enums.EngineMode.TesseractOnly"/> and <see cref="F:TesseractOCR.Enums.EngineMode.TesseractAndLstm"/>
            </remarks>
        </member>
        <member name="F:TesseractOCR.Helpers.Logger._logger">
            <summary>
                When set then logging is written to this ILogger instance
            </summary>
        </member>
        <member name="P:TesseractOCR.Helpers.Logger.InstanceId">
            <summary>
                An unique id that can be used to identify the logging of the converter when
                calling the code from multiple threads and writing all the logging to the same file
            </summary>
        </member>
        <member name="P:TesseractOCR.Helpers.Logger.LoggerInterface">
            <summary>
                Sets the logger interface
            </summary>
        </member>
        <member name="M:TesseractOCR.Helpers.Logger.LogInformation(System.String)">
            <summary>
                Writes an information line to the <see cref="F:TesseractOCR.Helpers.Logger._logger" />
            </summary>
            <param name="message">The message to write</param>
        </member>
        <member name="M:TesseractOCR.Helpers.Logger.LogError(System.String)">
            <summary>
                Writes an error line to the <see cref="F:TesseractOCR.Helpers.Logger._logger" />
            </summary>
            <param name="message">The message to write</param>
        </member>
        <member name="M:TesseractOCR.Helpers.Logger.LogDebug(System.String)">
            <summary>
                Writes a debug line to the <see cref="F:TesseractOCR.Helpers.Logger._logger" />
            </summary>
            <param name="message">The message to write</param>
        </member>
        <member name="T:TesseractOCR.Helpers.Math">
            <summary>
                Math helpers
            </summary>
        </member>
        <member name="M:TesseractOCR.Helpers.Math.ToRadians(System.Single)">
            <summary>
                Convert a degrees to radians
            </summary>
            <param name="angleInDegrees"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Helpers.Math.ToRadians(System.Double)">
            <summary>
                Convert a degrees to radians.
            </summary>
            <param name="angleInDegrees"></param>
            <returns></returns>
        </member>
        <member name="T:TesseractOCR.Internal.Guard">
            <summary>
                Generic pre-condition checks
            </summary>
        </member>
        <member name="M:TesseractOCR.Internal.Guard.Require(System.String,System.Boolean,System.String)">
            <summary>
                Ensures the given <paramref name="condition" /> is true.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="condition" /> is not true.</exception>
            <param name="paramName">The name of the parameter, used when generating the exception.</param>
            <param name="condition">The value of the parameter to check.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:TesseractOCR.Internal.Guard.Require(System.String,System.Boolean,System.String,System.Object[])">
            <summary>
                Ensures the given <paramref name="condition" /> is true.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="condition" /> is not true.</exception>
            <param name="paramName">The name of the parameter, used when generating the exception.</param>
            <param name="condition">The value of the parameter to check.</param>
            <param name="message">The error message.</param>
            <param name="args">The message argument used to format <paramref name="message" />.</param>
        </member>
        <member name="M:TesseractOCR.Internal.Guard.RequireNotNullOrEmpty(System.String,System.String)">
            <summary>
                Ensures the given <paramref name="value" /> is not null or empty.
            </summary>
            <exception cref="T:System.ArgumentException">The <paramref name="value" /> is null or empty.</exception>
            <param name="paramName">The name of the parameter, used when generating the exception.</param>
            <param name="value">The value of the parameter to check.</param>
        </member>
        <member name="M:TesseractOCR.Internal.Guard.Verify(System.Boolean,System.String,System.Object[])">
            <summary>
                Verifies the given <paramref name="condition" /> is <c>True</c>; throwing an
                <see cref="T:System.InvalidOperationException" /> when the condition is not met.
            </summary>
            <param name="condition">The condition to be tested.</param>
            <param name="message">The error message to raise if <paramref name="condition" /> is <c>False</c>.</param>
            <param name="args">Optional formatting arguments.</param>
        </member>
        <member name="T:TesseractOCR.Internal.TessConvert">
            <summary>
                Utility helpers to handle converting variable values.
            </summary>
        </member>
        <member name="T:TesseractOCR.InteropDotNet.LibraryLoader">
            <summary>
                Loads the needed library
            </summary>
        </member>
        <member name="P:TesseractOCR.InteropDotNet.LibraryLoader.CustomSearchPath">
            <summary>
                Uses an alternative search path
            </summary>
        </member>
        <member name="P:TesseractOCR.InteropDotNet.LibraryLoader.Instance">
            <summary>
                A singleton to the <see cref="T:TesseractOCR.InteropDotNet.LibraryLoader"/> class
            </summary>
        </member>
        <member name="M:TesseractOCR.InteropDotNet.LibraryLoader.LoadLibrary(System.String,System.String)">
            <summary>
                Loads the library and returns a pointer to it
            </summary>
            <param name="fileName">The full path to the library to load</param>
            <param name="platformName">The name of the platform</param>
            <returns></returns>
            <exception cref="T:System.DllNotFoundException"></exception>
        </member>
        <member name="M:TesseractOCR.InteropDotNet.LibraryLoader.FreeLibrary(System.String)">
            <summary>
                Frees all the resources for the library with the given <paramref name="fileName"/>
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.InteropDotNet.LibraryLoader.GetProcAddress(System.IntPtr,System.String)">
            <summary>
                Returns the pointer address for the given procedure
            </summary>
            <param name="dllHandle"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.InteropDotNet.LibraryLoader.IsLibraryLoaded(System.String)">
            <summary>
                Returns <c>true</c> when the library with the given <paramref name="fileName"/> has been loaded
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:TesseractOCR.Interop.Constants">
            <summary>
                Description of Constants.
            </summary>
        </member>
        <member name="T:TesseractOCR.Interop.ILeptonicaApiSignatures">
            <summary>
                The exported leptonica api signatures.
            </summary>
            <remarks>
                Please note this is only public for technical reasons (you can't proxy a internal interface).
                It should be considered an internal interface and is NOT part of the public api and may have 
                breaking changes between releases.
            </remarks>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapCreate(System.Int32)">
            <summary>
            Creates a new colormap with the specified <paramref name="depth"/>.
            </summary>
            <param name="depth">The depth of the pix in bpp, can be 2, 4, or 8</param>
            <returns>The pointer to the color map, or null on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapCreateRandom(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new colormap of the specified <paramref name="depth"/> with random colors where the first color can optionally be set to black, and the last optionally set to white.
            </summary>
            <param name="depth">The depth of the pix in bpp, can be 2, 4, or 8</param>
            <param name="hasBlack">If set to 1 the first color will be black.</param>
            <param name="hasWhite">If set to 1 the last color will be white.</param>
            <returns>The pointer to the color map, or null on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapCreateLinear(System.Int32,System.Int32)">
            <summary>
            Creates a new colormap of the specified <paramref name="depth"/> with equally spaced gray color values. 
            </summary>
            <param name="depth">The depth of the pix in bpp, can be 2, 4, or 8</param>
            <param name="levels">The number of levels (must be between 2 and 2^<paramref name="depth"/></param>
            <returns>The pointer to the colormap, or null on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapCopy(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Performs a deep copy of the color map.
            </summary>
            <param name="cmaps">The pointer to the colormap instance.</param>
            <returns>The pointer to the colormap, or null on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapDestroy(System.IntPtr@)">
            <summary>
            Destroys and cleans up any memory used by the color map.
            </summary>
            <param name="cmap">The pointer to the colormap instance, set to null on success.</param>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapGetCount(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Gets the number of color entries in the color map.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <returns>Returns the number of color entries in the color map, or 0 on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapGetFreeCount(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Gets the number of free color entries in the color map.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <returns>Returns the number of free color entries in the color map, or 0 on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapGetDepth(System.Runtime.InteropServices.HandleRef)">
            <returns>Returns color maps depth, or 0 on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapGetMinDepth(System.Runtime.InteropServices.HandleRef,System.Int32@)">
            <summary>
            Gets the minimum pix depth required to support the color map.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="minDepth">Returns the minimum depth to support the colormap</param>
            <returns>Returns 0 if OK, 1 on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapClear(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Removes all colors from the color map by setting the count to zero.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <returns>Returns 0 if OK, 1 on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapAddColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the color to the pix color map if their is room.
            </summary>
            <returns>Returns 0 if OK, 1 on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapAddNewColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Adds the specified color if it doesn't already exist, returning the colors index in the data array.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="redValue">The red value</param>
            <param name="greenValue">The green value</param>
            <param name="blueValue">The blue value</param>
            <param name="colorIndex">The index of the new color if it was added, or the existing color if it already existed.</param>
            <returns>Returns 0 for success, 1 for error, 2 for not enough space.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapAddNearestColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Adds the specified color if it doesn't already exist, returning the color's index in the data array.
            </summary>
            <remarks>
            If the color doesn't exist and there is not enough room to add a new color return the nearest color.
            </remarks>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="redValue">The red value</param>
            <param name="greenValue">The green value</param>
            <param name="blueValue">The blue value</param>
            <param name="colorIndex">The index of the new color if it was added, or the existing color if it already existed.</param>
            <returns>Returns 0 for success, 1 for error, 2 for not enough space.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapUsableColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Checks if the color already exists or if their is enough room to add it.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="redValue">The red value</param>
            <param name="greenValue">The green value</param>
            <param name="blueValue">The blue value</param>
            <param name="usable">Returns 1 if usable; 0 if not.</param>
            <returns>Returns 0 if OK, 1 on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapAddBlackOrWhite(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32@)">
            <summary>
            Adds a color (black\white) if not already there returning it's index through <paramref name="index"/>.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="color">The color to add (0 for black; 1 for white)</param>
            <param name="index">The index of the color.</param>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapSetBlackAndWhite(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32)">
            <summary>
            Sets the darkest color in the colormap to black, if <paramref name="setBlack"/> is 1. 
            Sets the lightest color in the colormap to white if <paramref name="setWhite"/> is 1. 
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="setBlack">0 for no operation; 1 to set darkest color to black</param>
            <param name="setWhite">0 for no operation; 1 to set lightest color to white</param>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapGetColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the color at the specified index.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="index">The index of the color entry.</param>
            <param name="redValue">The color entry's red value.</param>
            <param name="blueValue">The color entry's blue value.</param>
            <param name="greenValue">The color entry's green value.</param>
            <returns>Returns 0 if OK; 1 if not accessable (caller should check).</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapGetColor32(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32@)">
            <summary>
            Gets the color at the specified index.
            </summary>
            <remarks>
            The alpha channel will always be zero as it is not used in Leptonica color maps.
            </remarks>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="index">The index of the color entry.</param>
            <param name="color">The color entry as 32 bit value</param>
            <returns>Returns 0 if OK; 1 if not accessable (caller should check).</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapResetColor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a previously allocated color entry.
            </summary>
            <param name="cmap">The pointer to the colormap instance.</param>
            <param name="index">The index of the colormap entry</param>
            <param name="redValue"></param>
            <param name="blueValue"></param>
            <param name="greenValue"></param>
            <returns>Returns 0 if OK; 1 if not accessable (caller should check).</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapGetIndex(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the index of the color entry with the specified color, return 0 if found; 1 if not.
            </summary>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapHasColor(System.Runtime.InteropServices.HandleRef,System.Int32)">
            <summary>
            Returns 0 if the color exists in the color map; otherwise 1.
            </summary>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapCountGrayColors(System.Runtime.InteropServices.HandleRef,System.Int32@)">
            <summary>
            Returns the number of unique grey colors including black and white.
            </summary>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapGetRankIntensity(System.Runtime.InteropServices.HandleRef,System.Single,System.Int32@)">
            <summary>
            Finds the index of the color entry with the rank intensity.
            </summary>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapGetNearestIndex(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Finds the index of the color entry closest to the specified color.
            </summary>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixcmapGetNearestGrayIndex(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32@)">
            <summary>
            Finds the index of the color entry closest to the specified color.
            </summary>
            <remarks>
            Should only be used on gray colormaps.
            </remarks>
            <returns>Returns 0 if OK; 1 on error.</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ILeptonicaApiSignatures.pixBlend(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Single)">
             <summary>
            (1) This is a simple top-level interface.  For more flexibility,
            call directly into pixBlendMask(), etc.
             </summary>
             <remarks>
             </remarks>
             <param name="pixs1">[in] - blendee</param>
             <param name="pixs2">[in] - blender typ. smaller</param>
             <param name="x">[in] - ,y  origin [UL corner] of pixs2 relative to the origin of pixs1 can be  is smaller 0</param>
             <param name="fraction">[in] - blending fraction</param>
              <returns>pixd blended image, or NULL on error</returns>
        </member>
        <member name="M:TesseractOCR.Interop.MarshalHelper.StrLength(System.IntPtr)">
            <summary>
            	Gets the number of bytes in a null terminated byte array.
            </summary>
        </member>
        <member name="T:TesseractOCR.Interop.ITessApiSignatures">
             <summary>
                 The exported tesseract api signatures.
             </summary>
             <remarks>
                 Please note this is only public for technical reasons (you can't proxy a internal interface).
                 It should be considered an internal interface and is NOT part of the public api and may have
                 breaking changes between releases.
            
                 API URL: https://github.com/tesseract-ocr/tesseract/blob/main/include/tesseract/capi.h
             </remarks>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.GetVersion">
            <summary>
                Returns the current version
            </summary>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.DeleteTextArray(System.IntPtr)">
            <summary>
                Deallocates the memory block occupied by text array
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.DeleteIntArray(System.IntPtr)">
            <summary>
                Deallocates the memory block occupied by integer array
            </summary>
            <param name="arr"></param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.DeleteText(System.IntPtr)">
            <summary>
                Deallocates the memory block occupied by text array
            </summary>
            <param name="textPtr"></param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiCreate">
            <summary>
                Creates an instance of the base class for all Tesseract APIs
            </summary>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiDelete(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Disposes the TesseractAPI instance
            </summary>
            <param name="handle">The TesseractAPI instance</param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiSetInputName(System.Runtime.InteropServices.HandleRef,System.String)">
            <summary>
                Set the name of the input file. Needed only for training and reading a UNLV zone file, and for searchable PDF output
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="name">The name</param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetInputName(System.Runtime.InteropServices.HandleRef)">
            <summary>
                These functions are required for searchable PDF output. We need our hands on the input file so that we can include it in the PDF without
                transcoding. If that is not possible, we need the original image. Finally, resolution metadata is stored in the PDF so we need that as well
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns>The input name</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPISetInputImage(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
                Sets the input image
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="pixHandle"><see cref="P:TesseractOCR.Pix.Image.Handle"/></param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetInputImage(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Gets the input image
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns><see cref="P:TesseractOCR.Pix.Image.Handle"/></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetSourceYResolution(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Sets the Y-resolution for the image
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiGetDatapath(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Gets the data path
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiSetOutputName(System.Runtime.InteropServices.HandleRef,System.String)">
            <summary>
                Set the name of the bonus output files. Needed only for debugging
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="name"></param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiSetVariable(System.Runtime.InteropServices.HandleRef,System.String,System.IntPtr)">
            <summary>
                Set the value of an internal "parameter." Supply the name of the parameter and the value as a string, just as you would in
                a config file. Returns false if the name lookup failed. E.g., SetVariable("tessedit_char_blacklist", "xyz"); to ignore
                x, y and z. Or SetVariable("classify_bln_numeric_mode", "1"); to set numeric-only mode. SetVariable may be used before Init,
                but settings will revert to defaults on End()
            </summary>
            <remarks>
                Must be called after Init(). Only works for non-init variables (init variables should be passed to Init())
            </remarks>
            <param name="handle">The TesseractAPI instance</param>
            <param name="name"></param>
            <param name="valPtr"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiSetDebugVariable(System.Runtime.InteropServices.HandleRef,System.String,System.IntPtr)">
            <summary>
                Sets a debug variable
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="name"></param>
            <param name="valPtr"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiGetIntVariable(System.Runtime.InteropServices.HandleRef,System.String,System.Int32@)">
            <summary>
                Get the value of an internal int parameter
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiGetBoolVariable(System.Runtime.InteropServices.HandleRef,System.String,System.Int32@)">
            <summary>
                Get the value of an internal bool parameter
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiGetDoubleVariable(System.Runtime.InteropServices.HandleRef,System.String,System.Double@)">
            <summary>
                Get the value of an internal double parameter
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiPrintVariablesToFile(System.Runtime.InteropServices.HandleRef,System.String)">
            <summary>
                Print Tesseract parameters to the given file
            </summary>
            <remarks>
                Must not be the first method called after instance create
            </remarks>
            <param name="handle">The TesseractAPI instance</param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiInit1(System.Runtime.InteropServices.HandleRef,System.String,System.String,TesseractOCR.Enums.EngineMode,System.String[],System.Int32)">
             <summary>
                 Instances are now mostly thread-safe and totally independent, but some global parameters remain. Basically it is safe to use
                 multiple TessBaseAPIs in different threads in parallel, UNLESS you use SetVariable on some of the Params in classify and textord.
                 If you do, then the effect will be to change it for all your instances.
            
                 Start tesseract.Returns zero on success and -1 on failure. NOTE that the only members that may be called before Init are those
                 listed above here in the class definition.
            
                 It is entirely safe(and eventually will be efficient too) to call Init multiple times on the same instance to change language,
                 or just to reset the classifier.Languages may specify internally that they want to be loaded with one or more other languages,
                 so the ~sign is available to override that.E.g., if hin were set to load eng by default, then hin+~eng would force loading only
                 hin.The number of loaded languages is limited only by memory, with the caveat that loading additional languages will impact both
                 speed and accuracy, as there is more work to do to decide on the applicable language, and there is more chance of hallucinating
                 incorrect words.WARNING: On changing languages, all Tesseract parameters are reset back to their default values. (Which may vary
                 between languages.) If you have a rare need to set a Variable that controls initialization for a second call to Init you should
                 explicitly call End() and then use SetVariable before Init. This is only a very rare use case, since there are very few uses that
                 require any parameters to be set before Init
             </summary>
             <param name="handle">The TesseractAPI instance</param>
             <param name="datapath"></param>
             <param name="language"></param>
             <param name="mode"></param>
             <param name="configs"></param>
             <param name="configs_size"></param>
             <returns>0 on success and -1 on initialization failure</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiInit2(System.Runtime.InteropServices.HandleRef,System.String,System.String,TesseractOCR.Enums.EngineMode)">
             <summary>
                 Instances are now mostly thread-safe and totally independent, but some global parameters remain. Basically it is safe to use
                 multiple TessBaseAPIs in different threads in parallel, UNLESS you use SetVariable on some of the Params in classify and textord.
                 If you do, then the effect will be to change it for all your instances.
            
                 Start tesseract.Returns zero on success and -1 on failure. NOTE that the only members that may be called before Init are those
                 listed above here in the class definition.
            
                 It is entirely safe(and eventually will be efficient too) to call Init multiple times on the same instance to change language,
                 or just to reset the classifier.Languages may specify internally that they want to be loaded with one or more other languages,
                 so the ~sign is available to override that.E.g., if hin were set to load eng by default, then hin+~eng would force loading only
                 hin.The number of loaded languages is limited only by memory, with the caveat that loading additional languages will impact both
                 speed and accuracy, as there is more work to do to decide on the applicable language, and there is more chance of hallucinating
                 incorrect words.WARNING: On changing languages, all Tesseract parameters are reset back to their default values. (Which may vary
                 between languages.) If you have a rare need to set a Variable that controls initialization for a second call to Init you should
                 explicitly call End() and then use SetVariable before Init. This is only a very rare use case, since there are very few uses that
                 require any parameters to be set before Init
             </summary>
             <param name="handle">The TesseractAPI instance</param>
             <param name="datapath"></param>
             <param name="language"></param>
             <param name="mode"></param>
             <returns>0 on success and -1 on initialization failure</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiInit3(System.Runtime.InteropServices.HandleRef,System.String,System.String)">
             <summary>
                 Instances are now mostly thread-safe and totally independent, but some global parameters remain. Basically it is safe to use
                 multiple TessBaseAPIs in different threads in parallel, UNLESS you use SetVariable on some of the Params in classify and textord.
                 If you do, then the effect will be to change it for all your instances.
            
                 Start tesseract.Returns zero on success and -1 on failure. NOTE that the only members that may be called before Init are those
                 listed above here in the class definition.
            
                 It is entirely safe(and eventually will be efficient too) to call Init multiple times on the same instance to change language,
                 or just to reset the classifier.Languages may specify internally that they want to be loaded with one or more other languages,
                 so the ~sign is available to override that.E.g., if hin were set to load eng by default, then hin+~eng would force loading only
                 hin.The number of loaded languages is limited only by memory, with the caveat that loading additional languages will impact both
                 speed and accuracy, as there is more work to do to decide on the applicable language, and there is more chance of hallucinating
                 incorrect words.WARNING: On changing languages, all Tesseract parameters are reset back to their default values. (Which may vary
                 between languages.) If you have a rare need to set a Variable that controls initialization for a second call to Init you should
                 explicitly call End() and then use SetVariable before Init. This is only a very rare use case, since there are very few uses that
                 require any parameters to be set before Init
             </summary>
             <param name="handle">The TesseractAPI instance</param>
             <param name="datapath"></param>
             <param name="language"></param>
             <returns>0 on success and -1 on initialization failure</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiInit4(System.Runtime.InteropServices.HandleRef,System.String,System.String,System.Int32,System.String[],System.Int32,System.String[],System.String[],System.UIntPtr,System.Boolean)">
            <summary>
                Instances are now mostly thread-safe and totally independent, but some global parameters remain. Basically it is safe to use
                multiple TessBaseAPIs in different threads in parallel, UNLESS you use SetVariable on some of the Params in classify and textord.
                If you do, then the effect will be to change it for all your instances.
            
                Start tesseract.Returns zero on success and -1 on failure. NOTE that the only members that may be called before Init are those
                listed above here in the class definition.
            
                It is entirely safe(and eventually will be efficient too) to call Init multiple times on the same instance to change language,
                or just to reset the classifier.Languages may specify internally that they want to be loaded with one or more other languages,
                so the ~sign is available to override that.E.g., if hin were set to load eng by default, then hin+~eng would force loading only
                hin.The number of loaded languages is limited only by memory, with the caveat that loading additional languages will impact both
                speed and accuracy, as there is more work to do to decide on the applicable language, and there is more chance of hallucinating
                incorrect words.WARNING: On changing languages, all Tesseract parameters are reset back to their default values. (Which may vary
                between languages.) If you have a rare need to set a Variable that controls initialization for a second call to Init you should
                explicitly call End() and then use SetVariable before Init. This is only a very rare use case, since there are very few uses
                that require any parameters to be set before Init
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="datapath"></param>
            <param name="language"></param>
            <param name="mode"></param>
            <param name="configs"></param>
            <param name="configs_size"></param>
            <param name="vars_vec"></param>
            <param name="vars_values"></param>
            <param name="vars_vec_size"></param>
            <param name="set_only_non_debug_params"></param>
            <returns>0 on success and -1 on initialization failure</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetInitLanguagesAsString(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Returns the languages string used in the last valid initialization. If the last initialization specified "deu+hin" then that
                will be returned. If hin loaded eng automatically as well, then that will not be included in this list. To find the languages
                actually loaded, use GetLoadedLanguagesAsVector. The returned string should NOT be deleted
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetLoadedLanguagesAsVector(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Returns the loaded languages
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetAvailableLanguagesAsVector(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Returns the available languages
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIInitForAnalysePage(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Init only for page layout analysis. Use only for calls to SetImage and AnalysePage. Calls that attempt recognition will generate an error
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIReadConfigFile(System.Runtime.InteropServices.HandleRef,System.String)">
            <summary>
                Read a "config" file containing a set of param, value pairs. Searches the standard places: tessdata/configs, tessdata/tessconfigs and
                also accepts a relative or absolute path name. Note: only non-init params will be set (init params are set by Init())
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIReadDebugConfigFile(System.Runtime.InteropServices.HandleRef,System.String)">
            <summary>
                Read a DEBUG "config" file containing a set of param, value pairs. Searches the standard places: tessdata/configs, tessdata/tessconfigs and
                also accepts a relative or absolute path name. Note: only non-init params will be set (init params are set by Init())
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiSetPageSegMode(System.Runtime.InteropServices.HandleRef,TesseractOCR.Enums.PageSegMode)">
            <summary>
                Set the current page segmentation mode. Defaults to PSM_SINGLE_BLOCK. The mode is stored as an IntParam
                so it can also be modified by ReadConfigFile or SetVariable("tessedit_pageseg_mode", mode as string)
            </summary>
            <param name="handle"></param>
            <param name="mode"></param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiGetPageSegMode(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Return the current page segmentation mode
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIRect(System.Runtime.InteropServices.HandleRef,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Recognize a rectangle from an image and return the result as a string
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="imagedata"></param>
            <param name="bytes_per_pixel"></param>
            <param name="bytes_per_line"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIClearAdaptiveClassifier(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Call between pages or documents etc to free up memory and forget adaptive data
            </summary>
            <param name="handle">The TesseractAPI instance</param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPISetImage(System.Runtime.InteropServices.HandleRef,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Provide an image for Tesseract to recognize. Format is as TesseractRect above. Does not copy the image buffer, or take ownership.
                The source image may be destroyed after Recognize is called, either explicitly or implicitly via one of the Get*Text functions.
                SetImage clears all recognition results, and sets the rectangle to the full image, so it may be followed immediately by a GetUTF8Text,
                and it will automatically perform recognition
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="imagedata"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bytes_per_pixel"></param>
            <param name="bytes_per_line"></param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiSetImage(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
                Provide an image for Tesseract to recognize. Format is as TesseractRect above. Does not copy the image buffer, or take ownership.
                The source image may be destroyed after Recognize is called, either explicitly or implicitly via one of the Get*Text functions.
                SetImage clears all recognition results, and sets the rectangle to the full image, so it may be followed immediately by a
                GetUTF8Text, and it will automatically perform recognition
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="pixHandle"><see cref="P:TesseractOCR.Pix.Image.Handle"/></param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPISetSourceResolution(System.Runtime.InteropServices.HandleRef,System.Int32)">
            <summary>
                Set the resolution of the source image in pixels per inch so font size information can be calculated in results. Call this after SetImage()
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="ppi"></param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiSetRectangle(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Restrict recognition to a sub-rectangle of the image. Call after SetImage. Each SetRectangle clears the recognition results
                so multiple rectangles can be recognized with the same image
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiGetThresholdedImage(System.Runtime.InteropServices.HandleRef)">
            <summary>
                ONLY available after SetImage if you have Leptonica installed. Get a copy of the internal thresholded image from Tesseract
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetRegions(System.Runtime.InteropServices.HandleRef,System.IntPtr)">
            <summary>
                Get the result of page layout analysis as a Leptonica-style Boxa, Pixa pair, in reading order. Can be called before or after Recognize.
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="pixa"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetTextlines(System.Runtime.InteropServices.HandleRef,System.IntPtr,System.IntPtr)">
            <summary>
                Get the textlines as a Leptonica-style Boxa, Pixa pair, in reading order. Can be called before or after Recognize. If blockids
                is not NULL, the block-id of each line is also returned as an array of one element per line. delete [] after use. If paraids
                is not NULL, the paragraph-id of each line within its block is also returned as an array of one element per line. delete [] after use.
                Helper method to extract from the thresholded image(most common usage).
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="pixa"></param>
            <param name="blockids"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.TessBaseAPIGetTextlines1(System.Runtime.InteropServices.HandleRef,System.Boolean,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
                Get the textlines as a Leptonica-style Boxa, Pixa pair, in reading order. Can be called before or after Recognize. If blockids
                is not NULL, the block-id of each line is also returned as an array of one element per line. delete [] after use. If paraids is
                not NULL, the paragraph-id of each line within its block is also returned as an array of one element per line. delete [] after use.
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="raw_image"></param>
            <param name="raw_padding"></param>
            <param name="pixa"></param>
            <param name="blockids"></param>
            <param name="paraids"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetStrips(System.Runtime.InteropServices.HandleRef,System.IntPtr,System.IntPtr)">
            <summary>
                Get textlines and strips of image regions as a Leptonica-style Boxa, Pixa pair, in reading order. Enables downstream handling
                of non-rectangular regions. Can be called before or after Recognize. If blockids is not NULL, the block-id of each line is
                also returned as an array of one element per line. delete [] after use.
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="pixa"></param>
            <param name="blockids"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetWords(System.Runtime.InteropServices.HandleRef,System.IntPtr,System.IntPtr)">
            <summary>
                Get the words as a Leptonica-style Boxa, Pixa pair, in reading order. Can be called before or after Recognize.
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="pixa"></param>
            <param name="blockids"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetConnectedComponents(System.Runtime.InteropServices.HandleRef,System.IntPtr)">
            <summary>
                Gets the individual connected (text) components (created after pages segmentation step, but before recognition) as a
                Leptonica-style Boxa, Pixa pair, in reading order. Can be called before or after Recognize.
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="pixa"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiGetComponentImages(System.Runtime.InteropServices.HandleRef,TesseractOCR.Enums.PageIteratorLevel,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
                Get the given level kind of components (block, textline, word etc.) as a Leptonica-style Boxa, Pixa pair, in reading order.
                Can be called before or after Recognize. If blockids is not NULL, the block-id of each component is also returned as an
                array of one element per component. delete [] after use. If text_only is true, then only text components are returned.
                Helper function to get binary images with no padding (most common usage).
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="level"></param>
            <param name="text_only"></param>
            <param name="pixa"></param>
            <param name="blockids"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiGetComponentImages1(System.Runtime.InteropServices.HandleRef,TesseractOCR.Enums.PageIteratorLevel,System.Int32,System.Boolean,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
                Get the given level kind of components (block, textline, word etc.) as a Leptonica-style Boxa, Pixa pair, in reading order.
                Can be called before or after Recognize. If blockids is not NULL, the block-id of each component is also returned as an array of
                one element per component. delete [] after use. If paraids is not NULL, the paragraph-id of each component with its block is also
                returned as an array of one element per component. delete [] after use. If raw_image is true, then portions of the original image
                are extracted instead of the thresholded image and padded with raw_padding. If text_only is true, then only text components are returned.
            </summary>
            <param name="handle"></param>
            <param name="level"></param>
            <param name="text_only"></param>
            <param name="raw_image"></param>
            <param name="pixa"></param>
            <param name="blockids"></param>
            <param name="paraids"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetThresholdedImageScaleFactor(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Scale factor from original image
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiAnalyseLayout(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Runs page layout analysis in the mode set by SetPageSegMode
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiProcessPages(System.Runtime.InteropServices.HandleRef,System.String,System.String,System.Int32,System.Runtime.InteropServices.HandleRef)">
            <summary>
                Recognize the image from SetAndThresholdImage, generating Tesseract internal structures. Returns 0 on success. Optional.
                The Get*Text functions below will call Recognize if needed. After Recognize, the output is kept internally until the next SetImage
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="filename"></param>
            <param name="retry_config"></param>
            <param name="timeout_millisec"></param>
            <param name="renderer"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiProcessPage(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Int32,System.String,System.String,System.Int32,System.Runtime.InteropServices.HandleRef)">
            <summary>
                The recognized text is returned as a char* which is coded as UTF-8 and must be freed with the delete [] operator.
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="pixHandle"><see cref="P:TesseractOCR.Pix.Image.Handle"/></param>
            <param name="page_index"></param>
            <param name="filename"></param>
            <param name="retry_config"></param>
            <param name="timeout_millisec"></param>
            <param name="renderer"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiGetIterator(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Get a reading-order iterator to the results of LayoutAnalysis and/or Recognize. The returned iterator must be deleted after use.
                WARNING! This class points to data held within the TessBaseAPI class, and therefore can only be used while the TessBaseAPI class
                still exists and has not been subjected to a call of Init, SetImage, Recognize, Clear, End, DetectOS, or anything else that
                changes the internal PAGE_RES.
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetMutableIterator(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Get a mutable iterator to the results of LayoutAnalysis and/or Recognize. The returned iterator must be deleted after use.
                WARNING! This class points to data held within the TessBaseAPI class, and therefore can only be used while the TessBaseAPI
                class still exists and has not been subjected to a call of Init, SetImage, Recognize, Clear, End, DetectOS, or anything else
                that changes the internal PAGE_RES.
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiMeanTextConf(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Returns the average word confidence for Tesseract page result
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIAllWordConfidences(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Returns an array of all word confidences, terminated by -1
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIAdaptToWordStr(System.Runtime.InteropServices.HandleRef,TesseractOCR.Enums.PageSegMode,System.String)">
            <summary>
                Applies the given word to the adaptive classifier if possible. The word must be SPACE-DELIMITED UTF-8 - l i k e t h i s ,
                so it can tell the boundaries of the graphemes. Assumes that SetImage/SetRectangle have been used to set the image to the
                given word. The mode arg should be PSM_SINGLE_WORD or PSM_CIRCLE_WORD, as that will be used to control layout analysis.
                The currently set PageSegMode is preserved. Returns false if adaption was not possible for some reason
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="mode"><see cref="T:TesseractOCR.Enums.PageSegMode"/></param>
            <param name="wordstr"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseApiClear(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Free up recognition results and any stored image data, without actually freeing any recognition data that would be time-consuming to reload
            </summary>
            <param name="handle">The TesseractAPI instance</param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIEnd(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Close down tesseract and free up all memory. End() is equivalent to destructing and reconstructing your TessBaseAPI.
                Once End() has been used, none of the other API functions may be used other than Init and anything declared above
                it in the class definition.
            </summary>
            <param name="handle">The TesseractAPI instance</param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIIsValidWord(System.Runtime.InteropServices.HandleRef,System.String)">
            <summary>
                Check whether a word is valid according to Tesseract's language model
            </summary>
            <param name="handle"></param>
            <param name="word"></param>
            <remarks>
                0 if the word is invalid, non-zero if valid
            </remarks>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetTextDirection(System.Runtime.InteropServices.HandleRef,System.Int32,System.Single)">
            <summary>
                Gets text direction
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="out_offset">Offset</param>
            <param name="out_slope">Slope</param>
            <returns>TRUE if text direction is valid</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIGetUnichar(System.Runtime.InteropServices.HandleRef,System.Int32)">
            <summary>
                Gets the string of the specified unichar
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <param name="unichar_id"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIClearPersistentCache(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Clear any library-level memory caches. There are a variety of expensive-to-load constant data structures
                (mostly language dictionaries) that are cached globally -- surviving the Init() and End() of individual TessBaseAPI's.
                This function allows the clearing of these caches
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseAPIOem(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Returns the current engine mode
            </summary>
            <param name="handle">The TesseractAPI instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.BaseGetBlockTextOrientations(System.Runtime.InteropServices.HandleRef,System.Int32[]@,System.Boolean[]@)">
            <summary>
                Return text orientation of each block as determined in an earlier page layout analysis operation.
                Orientation is returned as the number of ccw 90-degree rotations (in [0..3]) required to make the
                text in the block upright (readable). Note that this may not necessary be the block orientation preferred
                for recognition (such as the case of vertical CJK text). Also returns whether the text in the block is
                believed to have vertical writing direction (when in an upright page orientation).
                The returned array is of length equal to the number of text blocks, which may be less than the total number of blocks.
                The ordering is intended to be consistent with GetTextLines().
            </summary>
            <param name="handle"></param>
            <param name="block_orientation"></param>
            <param name="vertical_writing"></param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.PageIteratorDelete(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Deletes the specified PageIterator instance
            </summary>
            <param name="handle">The TessPageIterator instance</param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.PageIteratorCopy(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Creates a copy of the specified PageIterator instance
            </summary>
            <param name="handle">The TessPageIterator instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.PageIteratorBegin(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Resets the iterator to point to the start of the page
            </summary>
            <param name="handle">The TessPageIterator instance</param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.PageIteratorNext(System.Runtime.InteropServices.HandleRef,TesseractOCR.Enums.PageIteratorLevel)">
            <summary>
                Moves to the start of the next object at the given level in the page hierarchy, and returns false if the
                end of the page was reached. NOTE (CHANGED!) that ALL PageIteratorLevel level values will visit each non-text
                block at least once.Think of non text blocks as containing a single para, with at least one line, with a single
                imaginary word, containing a single symbol.The bounding boxes mark out any polygonal nature of the block,
                and PTIsTextType(BLockType()) is false for non-text blocks. Calls to Next with different levels may be freely
                intermixed.This function iterates words in right-to-left scripts correctly, if the appropriate language has
                been loaded into Tesseract
            </summary>
            <param name="handle">The TessPageIterator instance</param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.PageIteratorIsAtBeginningOf(System.Runtime.InteropServices.HandleRef,TesseractOCR.Enums.PageIteratorLevel)">
            <summary>
                Returns TRUE if the iterator is at the start of an object at the given level. Possible uses include
                determining if a call to Next(RIL_WORD) moved to the start of a RIL_PARA
            </summary>
            <remarks>
                1 if true
            </remarks>
            <param name="handle">The TessPageIterator instance</param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.PageIteratorIsAtFinalElement(System.Runtime.InteropServices.HandleRef,TesseractOCR.Enums.PageIteratorLevel,TesseractOCR.Enums.PageIteratorLevel)">
            <summary>
                Returns whether the iterator is positioned at the last element in a given level. (e.g. the last word in a line, the last line in a block)
            </summary>
            <remarks>
                1 if true
            </remarks>
            <param name="handle">The TessPageIterator instance</param>
            <param name="level"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.PageIteratorBoundingBox(System.Runtime.InteropServices.HandleRef,TesseractOCR.Enums.PageIteratorLevel,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                Returns the bounding rectangle of the current object at the given level in coordinates of the original image
            </summary>
            <param name="handle">The TessPageIterator instance</param>
            <param name="level"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
            <returns>FALSE if there is no such object at the current position</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.PageIteratorBlockType(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Returns the type of the current block
            </summary>
            <param name="handle">The TessPageIterator instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.PageIteratorGetBinaryImage(System.Runtime.InteropServices.HandleRef,TesseractOCR.Enums.PageIteratorLevel)">
            <summary>
                Returns a binary image of the current object at the given level. The position and size match the return from BoundingBoxInternal,
                and so this could be upscaled with respect to the original input image. Use pixDestroy to delete the image after use. The
                following methods are used to generate the images: RIL_BLOCK: mask the page image with the block polygon. RIL_TEXTLINE: Clip the
                rectangle of the line box from the page image.
            </summary>
            <param name="handle">The TessPageIterator instance</param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.PageIteratorGetImage(System.Runtime.InteropServices.HandleRef,TesseractOCR.Enums.PageIteratorLevel,System.Int32,System.Runtime.InteropServices.HandleRef,System.Int32@,System.Int32@)">
            <summary>
                Returns an image of the current object at the given level in greyscale if available in the input. To guarantee a binary image use
                BinaryImage. NOTE that in order to give the best possible image, the bounds are expanded slightly over the binary connected
                component, by the supplied padding, so the top-left position of the returned image is returned in (left,top). These will most
                likely not match the coordinates returned by BoundingBox. If you do not supply an original image, you will get a binary one.
                Use pixDestroy to delete the image after use
            </summary>
            <param name="handle">The TessPageIterator instance</param>
            <param name="level"></param>
            <param name="padding"></param>
            <param name="originalImage"></param>
            <param name="left"></param>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.PageIteratorBaseline(System.Runtime.InteropServices.HandleRef,TesseractOCR.Enums.PageIteratorLevel,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                Returns the baseline of the current object at the given level. The baseline is the line that passes through (x1, y1) and (x2, y2).
                WARNING: with vertical text, baselines may be vertical!
            </summary>
            <param name="handle">The TessPageIterator instance</param>
            <param name="level"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.PageIteratorOrientation(System.Runtime.InteropServices.HandleRef,TesseractOCR.Enums.Orientation@,TesseractOCR.Enums.WritingDirection@,TesseractOCR.Enums.TextLineOrder@,System.Single@)">
            <summary>
                Returns the orientation
            </summary>
            <param name="handle">The TessPageIterator instance</param>
            <param name="orientation"></param>
            <param name="writing_direction"></param>
            <param name="textLineOrder"></param>
            <param name="deskew_angle"></param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.PageIteratorParagraphInfo(System.Runtime.InteropServices.HandleRef,TesseractOCR.Enums.ParagraphJustification@,System.Boolean@,System.Boolean@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="handle">The TessPageIterator instance</param>
            <param name="justification"><see cref="T:TesseractOCR.Enums.ParagraphJustification"/></param>
            <param name="is_list_item">List item</param>
            <param name="is_crown">Very first or continuation</param>
            <param name="first_line_indent">First line indentation</param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.ResultIteratorDelete(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Deletes the specified ResultIterator handle
            </summary>
            <param name="handle">The TessResultIterator instance</param>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.ResultIteratorCopy(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Creates a copy of the specified ResultIterator instance
            </summary>
            <param name="handle">The TessResultIterator instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.ResultIteratorGetPageIterator(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Gets the PageIterator of the specified ResultIterator instance
            </summary>
            <param name="handle">The TessResultIterator instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.TessResultIteratorGetPageIteratorConst(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Gets the PageIterator of the specified ResultIterator instance.
            </summary>
            <param name="handle">The TessResultIterator instance</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.ResultIteratorGetChoiceIterator(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Native API call to TessResultIteratorGetChoiceIterator
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.ResultIteratorGetConfidence(System.Runtime.InteropServices.HandleRef,TesseractOCR.Enums.PageIteratorLevel)">
            <summary>
               Returns the mean confidence of the current object at the given level. The number should be interpreted as a percent probability (0.0f-100.0f) 
            </summary>
            <param name="handle">The TessResultIterator instance</param>
            <param name="level"><see cref="T:TesseractOCR.Enums.PageIteratorLevel"/></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.ResultIteratorWordFontAttributes(System.Runtime.InteropServices.HandleRef,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Int32@,System.Int32@)">
            <summary>
                Returns the font attributes of the current word. If iterating at a higher level object than words, e.g.,
                text lines, then this will return the attributes of the first word in that textline. The actual return
                value is a string representing a font name. It points to an internal table and SHOULD NOT BE DELETED.
                Lifespan is the same as the iterator itself, ie rendered invalid by various members of TessBaseAPI,
                including Init, SetImage, End or deleting the TessBaseAPI. Point size is returned in printers points (1/72 inch)
            </summary>
            <param name="handle">The TessResultIterator instance</param>
            <param name="isBold"></param>
            <param name="isItalic"></param>
            <param name="isUnderlined"></param>
            <param name="isMonospace"></param>
            <param name="isSerif"></param>
            <param name="isSmallCaps"></param>
            <param name="pointSize"></param>
            <param name="fontId"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.ResultIteratorWordIsFromDictionary(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Returns TRUE if the current word was found in a dictionary
            </summary>
            <param name="handle">The TessResultIterator instance</param>
            <returns>1 if word is from dictionary</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.ResultIteratorWordIsNumeric(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Returns TRUE if the current word is numeric
            </summary>
            <param name="handle"></param>
            <returns>1 if word is numeric</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.ResultIteratorSymbolIsSuperscript(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Returns TRUE if the current symbol is a superscript. If iterating at a higher level object than symbols, e.g., words, then this
                will return the attributes of the first symbol in that word
            </summary>
            <param name="handle">The TessResultIterator instance</param>
            <returns>1 if symbol is superscript</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.ResultIteratorSymbolIsSubscript(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Returns TRUE if the current symbol is a subscript. If iterating at a higher level object than symbols, e.g., words, then this
                will return the attributes of the first symbol in that word
            </summary>
            <param name="handle">The TessResultIterator instance</param>
            <returns>1 if symbol is subscript</returns>
        </member>
        <member name="M:TesseractOCR.Interop.ITessApiSignatures.ResultIteratorSymbolIsDropcap(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Returns TRUE if the current symbol is a dropcap. If iterating at a higher level object than symbols, e.g., words, then this
                will return the attributes of the first symbol in that word
            </summary>
            <param name="handle">The TessResultIterator instance</param>
            <returns>1 if symbol is dropcap</returns>
        </member>
        <member name="M:TesseractOCR.Interop.TessApi.ChoiceIteratorGetUTF8Text(System.Runtime.InteropServices.HandleRef)">
            <summary>
                Returns the null terminated UTF-8 encoded text string for the current choice
            </summary>
            <remarks>
                NOTE: Unlike LTRResultIterator::GetUTF8Text, the return points to an
                internal structure and should NOT be delete[]ed to free after use.
            </remarks>
            <param name="choiceIteratorHandle"></param>
            <returns>string</returns>
        </member>
        <member name="T:TesseractOCR.Layout.Blocks">
            <summary>
                All the <see cref="T:TesseractOCR.Layout.Blocks"/> on the <see cref="T:TesseractOCR.Page"/>
            </summary>
        </member>
        <member name="F:TesseractOCR.Layout.Blocks._disposed">
            <summary>
                Flag to check if we already disposed everything
            </summary>
        </member>
        <member name="M:TesseractOCR.Layout.Blocks.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:TesseractOCR.Layout.Blocks.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:TesseractOCR.Layout.Blocks.#ctor(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
                Creates this object
            </summary>
            <param name="engineHandleRef">A handle reference to the Tesseract engine</param>
            <param name="imageHandleRef">A handle reference to the <see cref="T:TesseractOCR.Pix.Image"/></param>
        </member>
        <member name="M:TesseractOCR.Layout.Blocks.Dispose">
            <summary>
                Cleans up the page iterator
            </summary>
        </member>
        <member name="T:TesseractOCR.Layout.Block">
            <summary>
                A single <see cref="T:TesseractOCR.Layout.Block"/> on the <see cref="T:TesseractOCR.Page"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Block.Current">
            <summary>
                Returns the current <see cref="T:TesseractOCR.Layout.Block"/> object
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Block.System#Collections#Generic#IEnumerator{TesseractOCR#Layout#Block}#Current">
            <summary>
                Returns the current <see cref="T:TesseractOCR.Layout.Block"/> object
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Block.Paragraphs">
            <summary>
                All the available <see cref="P:TesseractOCR.Layout.Block.Paragraphs"/> in this <see cref="T:TesseractOCR.Layout.Block"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Block.BlockType">
            <summary>
                Returns the <see cref="T:TesseractOCR.Enums.PolyBlockType"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Layout.Block.#ctor(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
                Creates this object
            </summary>
            <param name="engineHandleRef">A handle reference to the Tesseract engine</param>
            <param name="iteratorHandleRef">A handle reference to the page iterator</param>
            <param name="imageHandleRef">A handle reference to the <see cref="T:TesseractOCR.Pix.Image"/></param>
        </member>
        <member name="M:TesseractOCR.Layout.Block.MoveNext">
            <summary>
                Moves to the next <see cref="T:TesseractOCR.Layout.Block"/> in the <see cref="T:TesseractOCR.Layout.Blocks"/>
            </summary>
            <returns><c>true</c> when there is a next <see cref="T:TesseractOCR.Layout.Block"/>, otherwise <c>false</c></returns>
        </member>
        <member name="T:TesseractOCR.Layout.EnumerableBase">
            <summary>
                Base enumerable
            </summary>
        </member>
        <member name="F:TesseractOCR.Layout.EnumerableBase.EngineHandleRef">
            <summary>
                Handle that is returned by Tesseract engine
            </summary>
        </member>
        <member name="F:TesseractOCR.Layout.EnumerableBase.IteratorHandleRef">
            <summary>
                Handle that is returned by TessApi.Native.BaseApiGetIterator
            </summary>
        </member>
        <member name="F:TesseractOCR.Layout.EnumerableBase.ImageHandleRef">
            <summary>
                <see cref="T:TesseractOCR.Pix.Image"/>
            </summary>
        </member>
        <member name="T:TesseractOCR.Layout.EnumeratorBase">
            <summary>
                Base enumerator
            </summary>
        </member>
        <member name="F:TesseractOCR.Layout.EnumeratorBase.EngineHandleRef">
            <summary>
                Handle that is returned by Tesseract engine
            </summary>
        </member>
        <member name="F:TesseractOCR.Layout.EnumeratorBase.IteratorHandleRef">
            <summary>
                Handle that is returned by TessApi.Native.BaseApiGetIterator
            </summary>
        </member>
        <member name="F:TesseractOCR.Layout.EnumeratorBase.ImageHandleRef">
            <summary>
                <see cref="T:TesseractOCR.Pix.Image"/>
            </summary>
        </member>
        <member name="F:TesseractOCR.Layout.EnumeratorBase.PageIteratorLevel">
            <summary>
                The <see cref="F:TesseractOCR.Layout.EnumeratorBase.PageIteratorLevel"/>
            </summary>
        </member>
        <member name="F:TesseractOCR.Layout.EnumeratorBase._fontProperties">
            <summary>
                <see cref="P:TesseractOCR.Layout.EnumeratorBase.FontProperties"/>
            </summary>
        </member>
        <member name="F:TesseractOCR.Layout.EnumeratorBase.First">
            <summary>
                Flag to check if we are doing our first enumeration
            </summary>
        </member>
        <member name="F:TesseractOCR.Layout.EnumeratorBase.LogDebug">
            <summary>
                When set then we log at a debug level
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.EnumeratorBase.IsAtBeginning">
            <summary>
                Returns <c>true</c> if the iterator is at the first element at the current <see cref="F:TesseractOCR.Layout.EnumeratorBase.PageIteratorLevel"/>
            </summary>
            <returns><c>true</c> when at the beginning</returns>
        </member>
        <member name="P:TesseractOCR.Layout.EnumeratorBase.Text">
            <summary>
                Returns the text for the current <see cref="F:TesseractOCR.Layout.EnumeratorBase.PageIteratorLevel"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.EnumeratorBase.Confidence">
            <summary>
                Returns the confidence for the current <see cref="F:TesseractOCR.Layout.EnumeratorBase.PageIteratorLevel"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:TesseractOCR.Layout.EnumeratorBase.BinaryImage">
            <summary>
                Returns a binary (gray) <see cref="T:TesseractOCR.Pix.Image"/> at the current <see cref="F:TesseractOCR.Layout.EnumeratorBase.PageIteratorLevel"/>
            </summary>
            <returns>The <see cref="T:TesseractOCR.Pix.Image"/> or <c>null</c> when it fails</returns>
        </member>
        <member name="P:TesseractOCR.Layout.EnumeratorBase.SegmentedRegions">
            <summary>
                Returns segmented regions at the current <see cref="F:TesseractOCR.Layout.EnumeratorBase.PageIteratorLevel"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.EnumeratorBase.Image">
            <summary>
                Returns a <see cref="T:TesseractOCR.Pix.Image"/> from what is seen at the current <see cref="F:TesseractOCR.Layout.EnumeratorBase.PageIteratorLevel"/>>
            </summary>
            <remarks>
                Image.Item1 = The image<br/>
                Image.Item2 = The left coordinate of the image<br/>
                Image.Item3 = The top coordinate of the image<br/>
            </remarks>
        </member>
        <member name="P:TesseractOCR.Layout.EnumeratorBase.BoundingBox">
            <summary>
                Returns the bounding <see cref="T:TesseractOCR.Rect"/> of the current <see cref="F:TesseractOCR.Layout.EnumeratorBase.PageIteratorLevel"/>
            </summary>
            <returns>Returns the <see cref="T:TesseractOCR.Rect"/> or <c>null</c> when it fails</returns>
        </member>
        <member name="P:TesseractOCR.Layout.EnumeratorBase.Baseline">
            <summary>
                Returns the baseline of the current <see cref="F:TesseractOCR.Layout.EnumeratorBase.PageIteratorLevel"/>
            </summary>
            <remarks>
                The baseline is the line that passes through (x1, y1) and (x2, y2).
                WARNING: with vertical text, baselines may be vertical! Returns <c>false</c> if there is no baseline at the current
                position
            </remarks>
            <returns>Returns the <see cref="T:TesseractOCR.Rect"/> or <c>null</c> when it fails</returns>
        </member>
        <member name="P:TesseractOCR.Layout.EnumeratorBase.Properties">
            <summary>
                Returns the <see cref="T:TesseractOCR.ElementProperties"/> of the current <see cref="F:TesseractOCR.Layout.EnumeratorBase.PageIteratorLevel"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.EnumeratorBase.IsSuperscript">
            <summary>
                Returns <c>true</c> when the <see cref="T:TesseractOCR.Layout.Symbol"/> is superscript
            </summary>
            <returns></returns>
            <remarks>
                <b>If iterating at a higher level object than <see cref="T:TesseractOCR.Layout.Symbols"/>, e.g., <see cref="T:TesseractOCR.Layout.Words"/>, then this
                will return the attributes of the first symbol in that <see cref="T:TesseractOCR.Layout.Word"/></b>
                <br/>
                A subscript or superscript is a character (such as a number or letter) that is set slightly below or
                above the normal line of type, respectively. It is usually smaller than the rest of the text.
                Subscripts appear at or below the baseline, while superscripts are above. Subscripts and superscripts
                are perhaps most often used in formulas, mathematical expressions, and specifications of chemical
                compounds and isotopes, but have many other uses as well.
            </remarks>
        </member>
        <member name="P:TesseractOCR.Layout.EnumeratorBase.IsSubscript">
            <summary>
                Returns <c>true</c> when the <see cref="T:TesseractOCR.Layout.Symbol"/> is subscript
            </summary>
            <returns></returns>
            <remarks>
                <b>If iterating at a higher level object than <see cref="T:TesseractOCR.Layout.Symbols"/>, e.g., <see cref="T:TesseractOCR.Layout.Words"/>, then this
                will return the attributes of the first symbol in that <see cref="T:TesseractOCR.Layout.Word"/></b>
                <br/>
                A subscript or superscript is a character (such as a number or letter) that is set slightly below or
                above the normal line of type, respectively. It is usually smaller than the rest of the text.
                Subscripts appear at or below the baseline, while superscripts are above. Subscripts and superscripts
                are perhaps most often used in formulas, mathematical expressions, and specifications of chemical
                compounds and isotopes, but have many other uses as well.
            </remarks>
        </member>
        <member name="P:TesseractOCR.Layout.EnumeratorBase.IsDropcap">
            <summary>
                Returns <c>true</c> when the <see cref="T:TesseractOCR.Layout.Symbol"/> is dropcap
            </summary>
            <remarks>
                <b>If iterating at a higher level object than <see cref="T:TesseractOCR.Layout.Symbols"/>, e.g., <see cref="T:TesseractOCR.Layout.Words"/>, then this
                will return the attributes of the first symbol in that <see cref="T:TesseractOCR.Layout.Word"/></b>
                <br/>
                A Drop Cap is the initial letter of a paragraph which sits within the margins and runs several
                lines deep into the paragraph, indenting some normal-sized text in these lines
            </remarks>
        </member>
        <member name="P:TesseractOCR.Layout.EnumeratorBase.FontProperties">
            <summary>
                Returns the <see cref="P:TesseractOCR.Layout.EnumeratorBase.FontProperties"/> of the current word. If iterating at a higher level object than words, e.g.,
                text lines, then this will return the attributes of the first word in that textline.
            </summary>
            <remarks>
                The <b>FontProperties.Attributes</b> are only available when using older engine modes like
                <see cref="F:TesseractOCR.Enums.EngineMode.TesseractOnly"/> and <see cref="F:TesseractOCR.Enums.EngineMode.TesseractAndLstm"/>
            </remarks>
        </member>
        <member name="M:TesseractOCR.Layout.EnumeratorBase.Reset">
            <summary>
                Resets the enumerator to the first element
            </summary>
        </member>
        <member name="M:TesseractOCR.Layout.EnumeratorBase.MoveNext">
            <summary>
                Moves to the next element at the current <see cref="F:TesseractOCR.Layout.EnumeratorBase.PageIteratorLevel"/>
            </summary>
            <returns><c>true</c> when there is a next <see cref="T:TesseractOCR.Layout.Paragraph"/>, otherwise <c>false</c></returns>
        </member>
        <member name="M:TesseractOCR.Layout.EnumeratorBase.Dispose">
            <summary>
                Does not do a thing, we have to implement it because of the IEnumerator interface
            </summary>
        </member>
        <member name="T:TesseractOCR.Layout.Paragraphs">
            <summary>
                All the <see cref="T:TesseractOCR.Layout.Paragraphs"/> in the <see cref="T:TesseractOCR.Layout.Block"/>
            </summary>
        </member>
        <member name="M:TesseractOCR.Layout.Paragraphs.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:TesseractOCR.Layout.Paragraphs.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:TesseractOCR.Layout.Paragraphs.#ctor(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
                Creates this object
            </summary>
            <param name="engineHandleRef">A handle reference to the Tesseract engine</param>
            <param name="iteratorHandleRef">A handle reference to the page iterator</param>
            <param name="imageHandleRef">A handle reference to the <see cref="T:TesseractOCR.Pix.Image"/></param>
        </member>
        <member name="T:TesseractOCR.Layout.Paragraph">
            <summary>
                A single <see cref="T:TesseractOCR.Layout.Paragraph"/> in the <see cref="T:TesseractOCR.Layout.Block"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Paragraph.Current">
            <summary>
                Returns the current <see cref="T:TesseractOCR.Layout.Paragraph"/> object
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Paragraph.System#Collections#Generic#IEnumerator{TesseractOCR#Layout#Paragraph}#Current">
            <summary>
                Returns the current <see cref="T:TesseractOCR.Layout.Paragraph"/> object
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Paragraph.TextLines">
            <summary>
                All the available <see cref="P:TesseractOCR.Layout.Paragraph.TextLines"/> in this <see cref="T:TesseractOCR.Layout.Paragraph"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Paragraph.IsAtFinalElement">
            <summary>
                Returns <c>true</c> if the iterator is at the final <see cref="T:TesseractOCR.Layout.Paragraph"/> in the current <see cref="T:TesseractOCR.Layout.Block"/>
            </summary>
            <returns><c>true</c> when at the end</returns>
        </member>
        <member name="P:TesseractOCR.Layout.Paragraph.Info">
            <summary>
                Returns information about the <see cref="T:TesseractOCR.Layout.Paragraph"/>
            </summary>
        </member>
        <member name="M:TesseractOCR.Layout.Paragraph.#ctor(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
                Creates this object
            </summary>
            <param name="engineHandleRef">A handle reference to the Tesseract engine</param>
            <param name="iteratorHandleRef">A handle reference to the page iterator</param>
            <param name="imageHandleRef">A handle reference to the <see cref="T:TesseractOCR.Pix.Image"/></param>
        </member>
        <member name="M:TesseractOCR.Layout.Paragraph.MoveNext">
            <summary>
                Moves to the next <see cref="T:TesseractOCR.Layout.Paragraph"/> in the current <see cref="T:TesseractOCR.Layout.Block"/>
            </summary>
            <returns><c>true</c> when there is a next <see cref="T:TesseractOCR.Layout.Paragraph"/>, otherwise <c>false</c></returns>
        </member>
        <member name="T:TesseractOCR.Layout.Symbols">
            <summary>
                All the <see cref="T:TesseractOCR.Layout.Symbols"/> in the <see cref="T:TesseractOCR.Layout.Word"/>
            </summary>
        </member>
        <member name="M:TesseractOCR.Layout.Symbols.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:TesseractOCR.Layout.Symbols.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:TesseractOCR.Layout.Symbols.#ctor(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
                Creates this object
            </summary>
            <param name="engineHandleRef">A handle reference to the Tesseract engine</param>
            <param name="iteratorHandleRef">A handle reference to the page iterator</param>
            <param name="imageHandleRef">A handle reference to the <see cref="T:TesseractOCR.Pix.Image"/></param>
        </member>
        <member name="T:TesseractOCR.Layout.Symbol">
            <summary>
                A single <see cref="T:TesseractOCR.Layout.Symbol"/> in the <see cref="T:TesseractOCR.Layout.Word"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Symbol.Current">
            <summary>
                Returns the current <see cref="T:TesseractOCR.Layout.Symbol"/> object
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Symbol.System#Collections#Generic#IEnumerator{TesseractOCR#Layout#Symbol}#Current">
            <summary>
                Returns the current <see cref="T:TesseractOCR.Layout.Symbol"/> object
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Symbol.IsAtFinalElement">
            <summary>
                Returns <c>true</c> if the iterator is at the final <see cref="T:TesseractOCR.Layout.Symbol"/> in the current <see cref="T:TesseractOCR.Layout.Word"/>
            </summary>
            <returns><c>true</c> when at the end</returns>
        </member>
        <member name="M:TesseractOCR.Layout.Symbol.#ctor(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
                Creates this object
            </summary>
            <param name="engineHandleRef">A handle reference to the Tesseract engine</param>
            <param name="iteratorHandleRef">A handle reference to the page iterator</param>
            <param name="imageHandleRef">A handle reference to the <see cref="T:TesseractOCR.Pix.Image"/></param>
        </member>
        <member name="M:TesseractOCR.Layout.Symbol.MoveNext">
            <summary>
                Moves to the next <see cref="T:TesseractOCR.Layout.Symbol"/> in the current <see cref="T:TesseractOCR.Layout.Word"/>
            </summary>
            <returns><c>true</c> when there is a next <see cref="T:TesseractOCR.Layout.Symbol"/>, otherwise <c>false</c></returns>
        </member>
        <member name="T:TesseractOCR.Layout.TextLines">
            <summary>
                All the <see cref="T:TesseractOCR.Layout.TextLines"/> in the <see cref="T:TesseractOCR.Layout.Paragraph"/>
            </summary>
        </member>
        <member name="M:TesseractOCR.Layout.TextLines.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:TesseractOCR.Layout.TextLines.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:TesseractOCR.Layout.TextLines.#ctor(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
                Creates this object
            </summary>
            <param name="engineHandleRef">A handle reference to the Tesseract engine</param>
            <param name="iteratorHandleRef">A handle reference to the page iterator</param>
            <param name="imageHandleRef">A handle reference to the <see cref="T:TesseractOCR.Pix.Image"/></param>
        </member>
        <member name="T:TesseractOCR.Layout.TextLine">
            <summary>
                A single <see cref="T:TesseractOCR.Layout.TextLine"/> in the <see cref="T:TesseractOCR.Layout.Paragraph"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.TextLine.Current">
            <summary>
                Returns the current <see cref="T:TesseractOCR.Layout.TextLine"/> object
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.TextLine.System#Collections#Generic#IEnumerator{TesseractOCR#Layout#TextLine}#Current">
            <summary>
                Returns the current <see cref="T:TesseractOCR.Layout.TextLine"/> object
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.TextLine.Words">
            <summary>
                All the available <see cref="P:TesseractOCR.Layout.TextLine.Words"/> in this <see cref="T:TesseractOCR.Layout.TextLine"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.TextLine.IsAtFinalElement">
            <summary>
                Returns <c>true</c> if the iterator is at the final <see cref="T:TesseractOCR.Layout.TextLine"/> in the current <see cref="T:TesseractOCR.Layout.Paragraph"/>
            </summary>
            <returns><c>true</c> when at the end</returns>
        </member>
        <member name="M:TesseractOCR.Layout.TextLine.#ctor(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
                Creates this object
            </summary>
            <param name="engineHandleRef">A handle reference to the Tesseract engine</param>
            <param name="iteratorHandleRef">A handle reference to the page iterator</param>
            <param name="imageHandleRef">A handle reference to the <see cref="T:TesseractOCR.Pix.Image"/></param>
        </member>
        <member name="M:TesseractOCR.Layout.TextLine.MoveNext">
            <summary>
                Moves to the next <see cref="T:TesseractOCR.Layout.Word"/> in the current <see cref="T:TesseractOCR.Layout.TextLine"/>
            </summary>
            <returns><c>true</c> when there is a next <see cref="T:TesseractOCR.Layout.TextLine"/>, otherwise <c>false</c></returns>
        </member>
        <member name="T:TesseractOCR.Layout.Words">
            <summary>
                All the <see cref="T:TesseractOCR.Layout.Words"/> in the <see cref="T:TesseractOCR.Layout.TextLine"/>
            </summary>
        </member>
        <member name="M:TesseractOCR.Layout.Words.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:TesseractOCR.Layout.Words.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:TesseractOCR.Layout.Words.#ctor(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
                Creates this object
            </summary>
            <param name="engineHandleRef">A handle reference to the Tesseract engine</param>
            <param name="iteratorHandleRef">A handle reference to the page iterator</param>
            <param name="imageHandleRef">A handle reference to the <see cref="T:TesseractOCR.Pix.Image"/></param>
        </member>
        <member name="T:TesseractOCR.Layout.Word">
            <summary>
                A single <see cref="T:TesseractOCR.Layout.Word"/> in the <see cref="T:TesseractOCR.Layout.TextLine"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Word.Current">
            <summary>
                Returns the current <see cref="T:TesseractOCR.Layout.Word"/> object
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Word.System#Collections#Generic#IEnumerator{TesseractOCR#Layout#Word}#Current">
            <summary>
                Returns the current <see cref="T:TesseractOCR.Layout.Word"/> object
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Word.Symbols">
            <summary>
                All the available <see cref="P:TesseractOCR.Layout.Word.Symbols"/> in this <see cref="T:TesseractOCR.Layout.Word"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Word.IsAtFinalElement">
            <summary>
                Returns <c>true</c> if the iterator is at the final <see cref="T:TesseractOCR.Layout.Word"/> in the current <see cref="T:TesseractOCR.Layout.TextLine"/>
            </summary>
            <returns><c>true</c> when at the end</returns>
        </member>
        <member name="P:TesseractOCR.Layout.Word.IsFromDictionary">
            <summary>
                Returns <c>true</c> when the <see cref="T:TesseractOCR.Layout.Word"/> is returned from a Tesseract dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="P:TesseractOCR.Layout.Word.IsNumeric">
            <summary>
                Returns <c>true</c> when the <see cref="T:TesseractOCR.Layout.Word"/> is numeric
            </summary>
            <returns></returns>
        </member>
        <member name="P:TesseractOCR.Layout.Word.Language">
            <summary>
                Returns the <see cref="P:TesseractOCR.Layout.Word.Language"/> for the recognized <see cref="T:TesseractOCR.Layout.Word"/>. Use the <see cref="P:TesseractOCR.Layout.Word.LanguageAsString"/>
                method when you have set the language with a string value when initializing the <see cref="T:TesseractOCR.Engine"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:TesseractOCR.Layout.Word.LanguageAsString">
            <summary>
                Returns the <see cref="P:TesseractOCR.Layout.Word.Language"/> as a string
            </summary>
        </member>
        <member name="P:TesseractOCR.Layout.Word.IsValid">
            <summary>
                Returns <c>true</c> when a word is valid according to Tesseract's language model
            </summary>
        </member>
        <member name="M:TesseractOCR.Layout.Word.#ctor(System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef,System.Runtime.InteropServices.HandleRef)">
            <summary>
                Creates this object
            </summary>
            <param name="engineHandleRef">A handle reference to the Tesseract engine</param>
            <param name="iteratorHandleRef">A handle reference to the page iterator</param>
            <param name="imageHandleRef">A handle reference to the <see cref="T:TesseractOCR.Pix.Image"/></param>
        </member>
        <member name="M:TesseractOCR.Layout.Word.MoveNext">
            <summary>
                Moves to the next <see cref="T:TesseractOCR.Layout.Word"/> in the current <see cref="T:TesseractOCR.Layout.TextLine"/>
            </summary>
            <returns><c>true</c> when there is a next <see cref="T:TesseractOCR.Layout.Word"/>, otherwise <c>false</c></returns>
        </member>
        <member name="T:TesseractOCR.Loggers.Console">
            <summary>
                Writes log information to console at the <see cref="F:Microsoft.Extensions.Logging.LogLevel.Debug"/>, <see cref="F:Microsoft.Extensions.Logging.LogLevel.Error"/>
                and <see cref="F:Microsoft.Extensions.Logging.LogLevel.Information"/> <see cref="T:Microsoft.Extensions.Logging.LogLevel"/>
            </summary>
            <remarks>
                Other levels are ignored
            </remarks>
        </member>
        <member name="T:TesseractOCR.Loggers.File">
            <summary>
                Writes log information to a file at the <see cref="F:Microsoft.Extensions.Logging.LogLevel.Debug"/>, <see cref="F:Microsoft.Extensions.Logging.LogLevel.Error"/>
                and <see cref="F:Microsoft.Extensions.Logging.LogLevel.Information"/> <see cref="T:Microsoft.Extensions.Logging.LogLevel"/>
            </summary>
            <remarks>
                Other levels are ignored
            </remarks>
        </member>
        <member name="M:TesseractOCR.Loggers.File.#ctor(System.String)">
            <summary>
                Logs information to the given <paramref name="fileName"/>
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:TesseractOCR.Loggers.Stream">
            <summary>
                Writes log information to a stream at the <see cref="!:LogLevel.Debug"/>, <see cref="!:LogLevel.Error"/>
                and <see cref="!:LogLevel.Information"/> <see cref="T:Microsoft.Extensions.Logging.LogLevel"/>
            </summary>
            <remarks>
                Other levels are ignored
            </remarks>
        </member>
        <member name="M:TesseractOCR.Loggers.Stream.#ctor(System.IO.Stream)">
            <summary>
                Logs information to the given <paramref name="stream"/>
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:TesseractOCR.Loggers.Stream.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
                Will always return <c>true</c>
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Loggers.Stream.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
                Writes logging to the log
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logLevel"></param>
            <param name="eventId"></param>
            <param name="state"></param>
            <param name="exception"></param>
            <param name="formatter"></param>
        </member>
        <member name="T:TesseractOCR.Page">
            <summary>
                A Tesseract page
            </summary>
        </member>
        <member name="F:TesseractOCR.Page.XhtmlBeginTag">
            <summary>
                XHTML begin Tag
            </summary>
        </member>
        <member name="F:TesseractOCR.Page.XhtmlEndTag">
            <summary>
                XHTML end Tag
            </summary>
        </member>
        <member name="F:TesseractOCR.Page.HtmlBeginTag">
            <summary>
                HTML begin tag
            </summary>
        </member>
        <member name="F:TesseractOCR.Page.HtmlEndTag">
            <summary>
                HTML end tag
            </summary>
        </member>
        <member name="P:TesseractOCR.Page.Engine">
            <summary>
                Returns a reference to the <see cref="T:TesseractOCR.Engine"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Page.Image">
            <summary>
                Returns the <see cref="N:TesseractOCR.Pix"/> <see cref="P:TesseractOCR.Page.Image" /> that is being ocr'd
            </summary>
        </member>
        <member name="P:TesseractOCR.Page.ImageName">
            <summary>
                Returns the name of the <see cref="P:TesseractOCR.Page.Image"/> being ocr'd
            </summary>
            <remarks>
                This is also used for some of the more advanced functionality such as identifying the associated UZN file if
                present
            </remarks>
        </member>
        <member name="P:TesseractOCR.Page.RegionOfInterest">
            <summary>
                Returns the current region of interest being parsed
            </summary>
        </member>
        <member name="P:TesseractOCR.Page.BlockTextOrientations">
            <summary>
                Return text orientation of each block as determined in an earlier page layout analysis operation.
                Orientation is returned as the number of ccw 90-degree rotations (in [0..3]) required to make the
                text in the block upright (readable). Note that this may not necessary be the block orientation preferred
                for recognition (such as the case of vertical CJK text). Also returns whether the text in the block is
                believed to have vertical writing direction (when in an upright page orientation).
                The returned array is of length equal to the number of text blocks, which may be less than the total number of blocks.
                The ordering is intended to be consistent with GetTextLines().
            </summary>
            <remarks>
                Item1 = Orientation as the number of ccw 90-degree rotations (in [0..3]) required to make the
                text in the block upright (readable),br/>
                Item2 = Returns whether the text in the block is believed to have vertical writing direction
                (when in an upright page orientation)
            </remarks>
        </member>
        <member name="P:TesseractOCR.Page.SegmentMode">
            <summary>
                Returns the segmentation mode used to OCR the specified <see cref="P:TesseractOCR.Page.Image"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Page.Number">
            <summary>
                Returns the page number
            </summary>
        </member>
        <member name="P:TesseractOCR.Page.ThresholdedImage">
            <summary>
                Returns the thresholded <see cref="P:TesseractOCR.Page.Image"/> that was OCR'd
            </summary>
            <returns>The <see cref="P:TesseractOCR.Page.Image"/> in grayscale</returns>
        </member>
        <member name="P:TesseractOCR.Page.ThresholdedImageScaleFactor">
            <summary>
                Returns the scale factor for thresholded <see cref="P:TesseractOCR.Page.Image"/> that was OCR'd
            </summary>
            <returns>The scale factor</returns>
        </member>
        <member name="P:TesseractOCR.Page.Layout">
            <summary>
                Returns a <see cref="T:TesseractOCR.Layout.Blocks" /> object that is used to iterate over the page's layout as defined by the
                current <see cref="P:TesseractOCR.Page.RegionOfInterest" />.
            </summary>
            <remarks>
                A page is build like this --> <see cref="T:TesseractOCR.Layout.Blocks"/> (with one or more <see cref="T:TesseractOCR.Layout.Block"/> objects) --> <br/>
                <see cref="T:TesseractOCR.Layout.Paragraphs"/> (with one or more <see cref="T:TesseractOCR.Layout.Paragraph"/> objects) --> <see cref="T:TesseractOCR.Layout.TextLines"/> <br/>
                with (one or more in a <see cref="T:TesseractOCR.Layout.TextLine"/> objects) --> <see cref="T:TesseractOCR.Layout.Words"/> (with one ore more <br/>
                <see cref="T:TesseractOCR.Layout.Word"/> objects) --> <see cref="T:TesseractOCR.Layout.Symbols"/> (with one ore more <see cref="T:TesseractOCR.Layout.Symbol"/> objects)
            </remarks>
            <returns>A enumerator at the <see cref="T:TesseractOCR.Layout.Blocks"/> level</returns>
        </member>
        <member name="P:TesseractOCR.Page.Text">
            <summary>
                Returns the page's content as plain text
            </summary>
            <returns>The OCR'd output as text string</returns>
        </member>
        <member name="M:TesseractOCR.Page.HOcrText(System.Boolean)">
            <summary>
                Returns the page's content as HOCR text
            </summary>
            <param name="useXHtml">True to use XHTML Output, False to HTML Output</param>
            <returns>The OCR'd output as an HOCR text string</returns>
        </member>
        <member name="P:TesseractOCR.Page.AltoText">
            <summary>
                Return the page's content as an Alto text
            </summary>
            <returns>The OCR'd output as an Alto text string.</returns>
        </member>
        <member name="P:TesseractOCR.Page.TsvText">
            <summary>
                Return the page's content as TSV text.
            </summary>
            <returns>The OCR'd output as a Tsv text string</returns>
        </member>
        <member name="P:TesseractOCR.Page.BoxText">
            <summary>
                Returns the page's content as box text
            </summary>
            <returns>The OCR'd output as a box text string</returns>
        </member>
        <member name="P:TesseractOCR.Page.LstmBoxText">
            <summary>
                Returns the page's content as LSTM box text
            </summary>
            <returns>The OCR'd output as a LSTMBox text string</returns>
        </member>
        <member name="P:TesseractOCR.Page.WordStrBoxText">
            <summary>
                Returns the page's content as a word string box text
            </summary>
            <returns>The OCR'd output as a WordStrBox text string</returns>
        </member>
        <member name="P:TesseractOCR.Page.UnlvText">
            <summary>
                Returns the page's content as UNLV text
            </summary>
            <returns>The OCR'd output as an UNLV text string</returns>
        </member>
        <member name="P:TesseractOCR.Page.MeanConfidence">
            <summary>
                Returns the mean confidence as a percentage of the recognized text
            </summary>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Page.#ctor(TesseractOCR.Engine,TesseractOCR.Pix.Image,System.String,TesseractOCR.Rect,TesseractOCR.Enums.PageSegMode,System.Int32)">
            <summary>
                Creates the <see cref="T:TesseractOCR.Page"/> object
            </summary>
            <param name="engine"><see cref="T:TesseractOCR.Engine"/></param>
            <param name="image">The <see cref="N:TesseractOCR.Pix"/> <see cref="P:TesseractOCR.Page.Image" /> that is being ocr'd</param>
            <param name="imageName">The name of the <see cref="P:TesseractOCR.Page.Image" /> being ocr'd</param>
            <param name="regionOfInterest">The current region of interest being parsed</param>
            <param name="segmentMode">The <see cref="T:TesseractOCR.Enums.PageSegMode"/> used to OCR the specified <see cref="P:TesseractOCR.Page.Image" /></param>
            <param name="number">The page number</param>
        </member>
        <member name="M:TesseractOCR.Page.DetectOrientation(System.Int32@,System.Single@)">
            <summary>
                Detects the page orientation, with corresponding confidence when using <see cref="F:TesseractOCR.Enums.PageSegMode.OsdOnly" />
            </summary>
            <remarks>
                If using full page segmentation mode (i.e. AutoOsd) then consider using <see cref="P:TesseractOCR.Page.Layout" /> instead as
                this also provides a deskew angle which isn't available when just performing orientation detection.
            </remarks>
            <param name="orientation">The detected clockwise page rotation in degrees (0, 90, 180, or 270)</param>
            <param name="confidence">The confidence level of the orientation (15 is reasonably confident)</param>
        </member>
        <member name="M:TesseractOCR.Page.DetectOrientationAndScript(System.Int32@,System.Single@,TesseractOCR.Enums.ScriptName@,System.Single@)">
            <summary>
                Detects the page orientation, with corresponding confidence when using <see cref="F:TesseractOCR.Enums.PageSegMode.OsdOnly" />.
            </summary>
            <remarks>
                If using full page segmentation mode (i.e. <see cref="F:TesseractOCR.Enums.PageSegMode.AutoOsd"/>) then consider using <see cref="P:TesseractOCR.Page.Layout" />
                instead as this because this also provides a deskew angle which isn't available when just performing orientation detection.
            </remarks>
            <param name="orientation">The detected clockwise page rotation in degrees (0, 90, 180, or 270)</param>
            <param name="confidence">The confidence level of the orientation (15 is reasonably confident)</param>
            <param name="scriptName"><see cref="T:TesseractOCR.Enums.ScriptName"/></param>
            <param name="scriptConfidence">The confidence level in the script</param>
        </member>
        <member name="M:TesseractOCR.Page.Recognize">
            <summary>
                Will perform a recognition of the <see cref="T:TesseractOCR.Page"/>
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:TesseractOCR.ParagraphInfo">
            <summary>
                Returns information about a <see cref="T:TesseractOCR.Layout.Paragraph"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.ParagraphInfo.Justification">
            <summary>
                <see cref="T:TesseractOCR.Enums.ParagraphJustification"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.ParagraphInfo.IsListItem">
            <summary>
                Returns <c>true</c> if the <see cref="T:TesseractOCR.Layout.Paragraph"/> is a list item
            </summary>
        </member>
        <member name="P:TesseractOCR.ParagraphInfo.IsCrown">
            <summary>
                Returns <c>true</c> when the letter is a crown
            </summary>
            <remarks>
                Big letters as shown in supplement one are to be called Crown Letters
            </remarks>
        </member>
        <member name="P:TesseractOCR.ParagraphInfo.FirstLineIdent">
            <summary>
                Returns <c>true</c> when the this is the first line ident
            </summary>
        </member>
        <member name="T:TesseractOCR.Pix.Array">
            <summary>
                Represents an array of <see cref="T:TesseractOCR.Pix.Image" />.
            </summary>
        </member>
        <member name="F:TesseractOCR.Pix.Array._handle">
            <summary>
                Gets the handle to the underlying PixA structure.
            </summary>
        </member>
        <member name="P:TesseractOCR.Pix.Array.Count">
            <summary>
                Gets the number of <see cref="T:TesseractOCR.Pix.Image" /> contained in the array.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Array.LoadMultiPageTiffFromFile(System.String)">
            <summary>
                Loads the multi-page tiff located at <paramref name="filename" />.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Pix.Array.LoadMultiPageTiffFromMemory(System.Byte[])">
            <summary>
                Loads the multi-page tiff from the memory <paramref name="bytes"/>
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Pix.Array.Create(System.Int32)">
            <summary>
                Creates a PIX array
            </summary>
            <param name="n"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:TesseractOCR.Pix.Array.Add(TesseractOCR.Pix.Image,TesseractOCR.Enums.PixArrayAccessType)">
            <summary>
                Add the specified pix to the end of the pix array.
            </summary>
            <remarks>
                PixArrayAccessType.Insert is not supported as the managed Pix object will attempt to release the pix when
                it goes out of scope creating an access exception.
            </remarks>
            <param name="pix">The pix to add.</param>
            <param name="copyflag">Determines if a clone or copy of the pix is inserted into the array.</param>
            <returns></returns>
        </member>
        <member name="T:TesseractOCR.Pix.Array.PixArrayEnumerator">
            <summary>
                Handles enumerating through the <see cref="T:TesseractOCR.Pix.Image" /> in the PixArray.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Array.PixArrayEnumerator.MoveNext">
            <inheritdoc />
        </member>
        <member name="P:TesseractOCR.Pix.Array.PixArrayEnumerator.Current">
            <inheritdoc />
        </member>
        <member name="P:TesseractOCR.Pix.Array.PixArrayEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:TesseractOCR.Pix.Array.PixArrayEnumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc />
        </member>
        <member name="M:TesseractOCR.Pix.Array.PixArrayEnumerator.VerifyArrayUnchanged">
            <summary>
                Verifies if the array is not changed
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:TesseractOCR.Pix.Array.Remove(System.Int32)">
            <summary>
                Removes the pix located at index.
            </summary>
            <remarks>
                Notes:
                * This shifts pixa[i] --> pixa[i - 1] for all i > index.
                * Do not use on large arrays as the functionality is O(n).
                * The corresponding box is removed as well, if it exists.
            </remarks>
            <param name="index">The index of the pix to remove.</param>
        </member>
        <member name="M:TesseractOCR.Pix.Array.Clear">
            <summary>
                Destroys ever pix in the array.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Array.GetPix(System.Int32,TesseractOCR.Enums.PixArrayAccessType)">
            <summary>
                Gets the <see cref="T:TesseractOCR.Pix.Image" /> located at <paramref name="index" /> using the specified <paramref name="accessType" />
                .
            </summary>
            <param name="index">The index of the pix (zero based).</param>
            <param name="accessType">
                The <see cref="T:TesseractOCR.Enums.PixArrayAccessType" /> used to retrieve the <see cref="T:TesseractOCR.Pix.Image" />, only Clone or
                Copy are allowed.
            </param>
            <returns>The retrieved <see cref="T:TesseractOCR.Pix.Image" />.</returns>
        </member>
        <member name="M:TesseractOCR.Pix.Array.GetEnumerator">
            <summary>
                Returns a <see cref="T:System.Collections.Generic.IEnumerator`1" /> that iterates the the array of <see cref="T:TesseractOCR.Pix.Image" />.
            </summary>
            <remarks>
                When done with the enumerator you must call <see cref="M:TesseractOCR.Pix.Array.Dispose(System.Boolean)" /> to release any unmanaged resources.
                However if your using the enumerator in a foreach loop, this is done for you automatically by .Net. This also means
                that any <see cref="T:TesseractOCR.Pix.Image" /> returned from the enumerator cannot safely be used outside a foreach loop (or after
                Dispose has been
                called on the enumerator). If you do indeed need the pix after the enumerator has been disposed of you must clone
                it using
                <see cref="M:TesseractOCR.Pix.Image.Clone" />.
            </remarks>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that iterates the the array of <see cref="T:TesseractOCR.Pix.Image" />.</returns>
        </member>
        <member name="P:TesseractOCR.Pix.Color.Red">
            <summary>
                Returns the red byte value
            </summary>
        </member>
        <member name="P:TesseractOCR.Pix.Color.Green">
            <summary>
                Returns the green byte value
            </summary>
        </member>
        <member name="P:TesseractOCR.Pix.Color.Blue">
            <summary>
                Returns the blue byte value
            </summary>
        </member>
        <member name="P:TesseractOCR.Pix.Color.Alpha">
            <summary>
                Returns the alpha byte value
            </summary>
        </member>
        <member name="T:TesseractOCR.Pix.Colormap">
            <summary>
                Represents a colormap.
            </summary>
            <remarks>
                Once the colormap is assigned to a pix it is owned by that pix and will be disposed off automatically
                when the pix is disposed off.
            </remarks>
        </member>
        <member name="P:TesseractOCR.Pix.Data.Pix">
            <summary>
                <see cref="P:TesseractOCR.Pix.Data.Pix"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Pix.Data.PixData">
            <summary>
                Pointer to the data.
            </summary>
        </member>
        <member name="P:TesseractOCR.Pix.Data.WordsPerLine">
            <summary>
                Number of 32-bit words per line.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Data.EndianByteSwap">
            <summary>
                Swaps the bytes on little-endian platforms within a word; bytes 0 and 3 swapped, and bytes `1 and 2 are swapped.
            </summary>
            <remarks>
                This is required for little-endians in situations where we convert from a serialized byte order that is in raster
                order,
                as one typically has in file formats, to one with MSB-to-the-left in each 32-bit word, or v.v. See
                <seealso href="http://www.leptonica.com/byte-addressing.html" />
            </remarks>
        </member>
        <member name="M:TesseractOCR.Pix.Data.GetDataBit(System.UInt32*,System.Int32)">
            <summary>
                Gets the pixel value for a 1bpp image.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Data.SetDataBit(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
                Sets the pixel value for a 1bpp image.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Data.GetDataDIBit(System.UInt32*,System.Int32)">
            <summary>
                Gets the pixel value for a 2bpp image.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Data.SetDataDIBit(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
                Sets the pixel value for a 2bpp image.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Data.GetDataQBit(System.UInt32*,System.Int32)">
            <summary>
                Gets the pixel value for a 4bpp image.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Data.SetDataQBit(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
                Sets the pixel value for a 4bpp image.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Data.GetDataByte(System.UInt32*,System.Int32)">
            <summary>
                Gets the pixel value for a 8bpp image.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Data.SetDataByte(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
                Sets the pixel value for a 8bpp image.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Data.GetDataTwoByte(System.UInt32*,System.Int32)">
            <summary>
                Gets the pixel value for a 16bpp image.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Data.SetDataTwoByte(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
                Sets the pixel value for a 16bpp image.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Data.GetDataFourByte(System.UInt32*,System.Int32)">
            <summary>
                Gets the pixel value for a 32bpp image.
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Data.SetDataFourByte(System.UInt32*,System.Int32,System.UInt32)">
            <summary>
                Sets the pixel value for a 32bpp image.
            </summary>
        </member>
        <member name="T:TesseractOCR.Pix.Image">
            <summary>
                Wrapper for a Leptonica <see cref="N:TesseractOCR.Pix"/> image
            </summary>
        </member>
        <member name="F:TesseractOCR.Pix.Image.DefaultBinarySearchReduction">
            <summary>
                Skew Defaults
            </summary>
        </member>
        <member name="F:TesseractOCR.Pix.Image.DefaultBinaryThreshold">
            <summary>
                Default binary threshold
            </summary>
        </member>
        <member name="F:TesseractOCR.Pix.Image.VerySmallAngle">
            <summary>
                A small angle, in radians, for threshold checking. Equal to about 0.06 degrees.
            </summary>
        </member>
        <member name="F:TesseractOCR.Pix.Image.SEL_STR2">
            <summary>
                HMT (with just misses) for speckle up to 2x2
                "oooo"
                "oC o"
                "o  o"
                "oooo"
            </summary>
        </member>
        <member name="F:TesseractOCR.Pix.Image.SEL_STR3">
            <summary>
                HMT (with just misses) for speckle up to 3x3
                "oC  o"
                "o   o"
                "o   o"
                "ooooo"
            </summary>
        </member>
        <member name="F:TesseractOCR.Pix.Image.ImageFormatLookup">
            <summary>
                Used to lookup <see cref="T:TesseractOCR.Pix.Image"/> formats by extension.
            </summary>
        </member>
        <member name="P:TesseractOCR.Pix.Image.ImageName">
            <summary>
                Gets the name of the <see cref="T:TesseractOCR.Pix.Image"/> being ocr'd.
            </summary>
            <remarks>
                This is also used for some of the more advanced functionality such as identifying the associated UZN file if
                present.
            </remarks>
        </member>
        <member name="P:TesseractOCR.Pix.Image.Colormap">
            <summary>
                Returns the colormap for the <see cref="T:TesseractOCR.Pix.Image"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Pix.Image.Depth">
            <summary>
                Returns the depth of the <see cref="T:TesseractOCR.Pix.Image"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Pix.Image.Height">
            <summary>
                Returns the height of the <see cref="T:TesseractOCR.Pix.Image"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Pix.Image.Width">
            <summary>
                Returns the width of the <see cref="T:TesseractOCR.Pix.Image"/>
            </summary>
        </member>
        <member name="P:TesseractOCR.Pix.Image.XRes">
            <summary>
                Gets or sets the X-resolution for the <see cref="T:TesseractOCR.Pix.Image"/> in DPI
            </summary>
        </member>
        <member name="P:TesseractOCR.Pix.Image.YRes">
            <summary>
                Gets or sets the Y-resolution for the <see cref="T:TesseractOCR.Pix.Image"/> in DPI
            </summary>
        </member>
        <member name="P:TesseractOCR.Pix.Image.Handle">
            <summary>
                Returns the <see cref="T:System.Runtime.InteropServices.HandleRef"/> to the <see cref="T:TesseractOCR.Pix.Image"/>
            </summary>
        </member>
        <member name="M:TesseractOCR.Pix.Image.#ctor(System.IntPtr)">
            <summary>
                Creates a new pix instance using an existing handle to a pix structure.
            </summary>
            <remarks>
                Note that the resulting instance takes ownership of the data structure.
            </remarks>
            <param name="handle"></param>
        </member>
        <member name="M:TesseractOCR.Pix.Image.LoadFromFile(System.String)">
            <summary>
                Loads the <see cref="T:TesseractOCR.Pix.Image"/> object from a file
            </summary>
            <param name="filename">The file name with it's full path</param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.LoadFromMemory(System.IO.MemoryStream)">
            <summary>
                Loads an image from a MemoryStream
            </summary>
            <param name="memoryStream">The memory stream</param>
            <returns><see cref="T:TesseractOCR.Pix.Image"/></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.LoadFromMemory(System.Byte[])">
            <summary>
                Loads an image from a byte array
            </summary>
            <param name="bytes">The byte array</param>
            <returns><see cref="T:TesseractOCR.Pix.Image"/></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.LoadFromMemory(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Loads an image from a byte array
            </summary>
            <param name="bytes">The byte array</param>
            <param name="offset">The offset</param>
            <param name="length">The length</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.LoadFromMemoryInternal(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Loads the <see cref="T:TesseractOCR.Pix.Image"/> object from a byte array
            </summary>
            <param name="bytes">The byte array</param>
            <param name="offset">The offset</param>
            <param name="length">The amount of bytes to read</param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.LoadMultiPageTiffFromMemory(System.Byte[])">
            <summary>
                Loads a multi-page TIFF <see cref="T:TesseractOCR.Pix.Image"/> from a byte array
            </summary>
            <param name="bytes"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.LoadTiffFromMemory(System.Byte[])">
            <summary>
                Loads a TIFF <see cref="T:TesseractOCR.Pix.Image"/> from a byte array
            </summary>
            <param name="bytes"></param>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Save(System.String,System.Nullable{TesseractOCR.Enums.ImageFormat})">
            <summary>
                Saves the <see cref="T:TesseractOCR.Pix.Image"/> to the specified file
            </summary>
            <param name="filename">The path to the file</param>
            <param name="imageFormat">
                The format to use when saving the image, if not specified the file extension is used to guess the
                format
            </param>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Clone">
            <summary>
                Increments this pix's reference count and returns a reference to the same pix data.
            </summary>
            <remarks>
                A "clone" is simply a reference to an existing pix. It is implemented this way because
                image can be large and hence expensive to copy and extra handles need to be made with a simple
                policy to avoid double frees and memory leaks.
                The general usage protocol is:
                <list type="number">
                    <item>Whenever you want a new reference to an existing <see cref="T:TesseractOCR.Pix.Image" /> call <see cref="M:TesseractOCR.Pix.Image.Clone" />.</item>
                    <item>
                        Always call <see cref="M:TesseractOCR.Pix.Image.Dispose(System.Boolean)" /> on all references. This decrements the reference count and
                        will destroy the pix when the reference count reaches zero.
                    </item>
                </list>
            </remarks>
            <returns>The pix with it's reference count incremented.</returns>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Scale(System.Single,System.Single)">
            <summary>
                Scales the current pix by the specified <paramref name="scaleX" /> and <paramref name="scaleY" /> factors returning
                a new <see cref="T:TesseractOCR.Pix.Image" /> of the same depth.
            </summary>
            <param name="scaleX"></param>
            <param name="scaleY"></param>
            <returns>The scaled image.</returns>
            <remarks>
                <para>
                    This function scales 32 bpp RGB; 2, 4 or 8 bpp palette color;
                    2, 4, 8 or 16 bpp gray; and binary images.
                </para>
                <para>
                    When the input has palette color, the color map is removed and
                    the result is either 8 bpp gray or 32 bpp RGB, depending on whether
                    the color map has color entries.  Images with 2, 4 or 16 bpp are
                    converted to 8 bpp.
                </para>
                <para>
                    Because Scale() is meant to be a very simple interface to a
                    number of scaling functions, including the use of unsharp masking,
                    the type of scaling and the sharpening parameters are chosen
                    by default. Grayscale and color images are scaled using one
                    of four methods, depending on the scale factors:
                    <list type="number">
                        <item>
                            <description>
                                antialiased subsampling (lowpass filtering followed by
                                subsampling, implemented here by area mapping), for scale factors
                                less than 0.2
                            </description>
                        </item>
                        <item>
                            <description>
                                antialiased subsampling with sharpening, for scale factors
                                between 0.2 and 0.7.
                            </description>
                        </item>
                        <item>
                            <description>
                                linear interpolation with sharpening, for scale factors between
                                0.7 and 1.4.
                            </description>
                        </item>
                        <item>
                            <description>
                                linear interpolation without sharpening, for scale factors >= 1.4.
                            </description>
                        </item>
                    </list>
                    One could use subsampling for scale factors very close to 1.0,
                    because it preserves sharp edges.  Linear interpolation blurs
                    edges because the dest pixels will typically straddle two src edge
                    pixels.  Subsampling removes entire columns and rows, so the edge is
                    not blurred.  However, there are two reasons for not doing this.
                    First, it moves edges, so that a straight line at a large angle to
                    both horizontal and vertical will have noticeable kinks where
                    horizontal and vertical rasters are removed.  Second, although it
                    is very fast, you get good results on sharp edges by applying
                    a sharpening filter.
                </para>
                <para>
                    For images with sharp edges, sharpening substantially improves the
                    image quality for scale factors between about 0.2 and about 2.0.
                    pixScale() uses a small amount of sharpening by default because
                    it strengthens edge pixels that are weak due to anti-aliasing.
                    The default sharpening factors are:
                    <list type="bullet">
                        <item>
                            <description><![CDATA[for scaling factors < 0.7:   sharpfract = 0.2    sharpwidth = 1]]></description>
                        </item>
                        <item>
                            <description>for scaling factors >= 0.7:  sharpfract = 0.4    sharpwidth = 2</description>
                        </item>
                    </list>
                    The cases where the sharpening half width is 1 or 2 have special
                    implementations and are about twice as fast as the general case.
                </para>
                <para>
                    However, sharpening is computationally expensive, and one needs
                    to consider the speed-quality tradeoff:
                    <list type="bullet">
                        <item>
                            <description>
                                For upscaling of RGB images, linear interpolation plus default
                                sharpening is about 5 times slower than upscaling alone.
                            </description>
                        </item>
                        <item>
                            <description>
                                For downscaling, area mapping plus default sharpening is
                                about 10 times slower than downscaling alone.
                            </description>
                        </item>
                    </list>
                    When the scale factor is larger than 1.4, the cost of sharpening,
                    which is proportional to image area, is very large compared to the
                    incremental quality improvement, so we cut off the default use of
                    sharpening at 1.4.  Thus, for scale factors greater than 1.4,
                    pixScale() only does linear interpolation.
                </para>
                <para>
                    In many situations you will get a satisfactory result by scaling
                    without sharpening: call pixScaleGeneral() with @sharpfract = 0.0.
                    Alternatively, if you wish to sharpen but not use the default
                    value, first call pixScaleGeneral() with @sharpfract = 0.0, and
                    then sharpen explicitly using pixUnsharpMasking().
                </para>
                <para>
                    Binary images are scaled to binary by sampling the closest pixel,
                    without any low-pass filtering (averaging of neighboring pixels).
                    This will introduce aliasing for reductions.  Aliasing can be
                    prevented by using pixScaleToGray() instead.
                </para>
                <para>
                    Warning: implicit assumption about RGB component order for LI color scaling
                </para>
            </remarks>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Create(System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates an empty <see cref="T:TesseractOCR.Pix.Image"/> object
            </summary>
            <param name="width">The width</param>
            <param name="height">The height</param>
            <param name="depth">The pixel depth</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Create(System.IntPtr)">
            <summary>
                Creates the <see cref="T:TesseractOCR.Pix.Image"/> object from a pointer
            </summary>
            <param name="handle"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.GetData">
            <summary>
                Returns the data of the Image object
            </summary>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Equals(System.Object)">
            <summary>
                Returns <c>true</c> when both objects are equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Equals(TesseractOCR.Pix.Image)">
            <summary>
                Compares an <see cref="T:TesseractOCR.Pix.Image"/> object to another <see cref="T:TesseractOCR.Pix.Image"/> object and returns <c>true</c> when they are equal
            </summary>
            <param name="other"></param>
            <returns></returns>
            <exception cref="T:TesseractOCR.Exceptions.TesseractException"></exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.GetHashCode">
            <summary>
                Generate a hashcode. Calls superclass, just avoiding a warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Pix.Image.BinarizeOtsuAdaptiveThreshold(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
                Binarization of the input image based on the passed parameters and the Otsu method
            </summary>
            <param name="sx"> sizeX Desired tile X dimension; actual size may vary.</param>
            <param name="sy"> sizeY Desired tile Y dimension; actual size may vary.</param>
            <param name="smoothx"> smoothX Half-width of convolution kernel applied to threshold array: use 0 for no smoothing.</param>
            <param name="smoothy"> smoothY Half-height of convolution kernel applied to threshold array: use 0 for no smoothing.</param>
            <param name="scorefract"> scoreFraction Fraction of the max Otsu score; typ. 0.1 (use 0.0 for standard Otsu).</param>
            <returns>The binarized image.</returns>
            <exception cref="T:TesseractOCR.Exceptions.LeptonicaException">Raised when something fails</exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.BinarizeSauvola(System.Int32,System.Single,System.Boolean)">
            <summary>
                Binarization of the input image using the Sauvola local thresholding method.
                Note: The source image must be 8 bpp grayscale; not colormapped.
            </summary>
            <remarks>
                <list type="number">
                    <listheader>Notes</listheader>
                    <item>
                        The window width and height are 2 * <paramref name="whsize" /> + 1. The minimum value for
                        <paramref name="whsize" /> is 2; typically it is >= 7.
                    </item>
                    <item>The local statistics, measured over the window, are the average and standard deviation.</item>
                    <item>
                        The measurements of the mean and standard deviation are performed inside a border of (
                        <paramref name="whsize" /> + 1) pixels.
                        If source pix does not have these added border pixels, use <paramref name="addborder" /> = <c>True</c> to
                        add it here; otherwise use
                        <paramref name="addborder" /> = <c>False</c>.
                    </item>
                    <item>
                        The Sauvola threshold is determined from the formula:  t = m * (1 - k * (1 - s / 128)) where t = local
                        threshold, m = local mean,
                        k = <paramref name="factor" />, and s = local standard deviation which is maximized at 127.5 when half the
                        samples are 0 and the other
                        half are 255.
                    </item>
                    <item>
                        The basic idea of Niblack and Sauvola binarization is that the local threshold should be less than the
                        median value,
                        and the larger the variance, the closer to the median it should be chosen. Typical values for k are between
                        0.2 and 0.5.
                    </item>
                </list>
            </remarks>
            <param name="whsize">the window half-width for measuring local statistics.</param>
            <param name="factor">
                The factor for reducing threshold due to variances greater than or equal to zero (0). Typically
                around 0.35.
            </param>
            <param name="addborder">If <c>True</c> add a border of width (<paramref name="whsize" /> + 1) on all sides.</param>
            <returns>The binarized image</returns>
            <exception cref="T:TesseractOCR.Exceptions.LeptonicaException">Raised when something fails</exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.BinarizeSauvolaTiled(System.Int32,System.Single,System.Int32,System.Int32)">
            <summary>
                Binarization of the input image using the Sauvola local thresholding method on tiles
                of the source image.
                Note: The source image must be 8 bpp grayscale; not colormapped.
            </summary>
            <remarks>
                A tiled version of Sauvola can become necessary for large source images (over 16M pixels) because:
                * The mean value accumulator is a uint32, overflow can occur for an image with more than 16M pixels.
                * The mean value accumulator array for 16M pixels is 64 MB. While the mean square accumulator array for 16M pixels
                is 128 MB.
                Using tiles reduces the size of these arrays.
                * Each tile can be processed independently, in parallel, on a multi-core processor.
            </remarks>
            <param name="whsize">The window half-width for measuring local statistics</param>
            <param name="factor">
                The factor for reducing threshold due to variances greater than or equal to zero (0). Typically
                around 0.35.
            </param>
            <param name="nx">The number of tiles to subdivide the source image into on the x-axis.</param>
            <param name="ny">The number of tiles to subdivide the source image into on the y-axis.</param>
            <returns>THe binarized image</returns>
            <exception cref="T:TesseractOCR.Exceptions.LeptonicaException">Raised when something fails</exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.ConvertRGBToGray(System.Single,System.Single,System.Single)">
            <summary>
                Conversion from RBG to 8bpp grayscale using the specified weights. Note red, green, blue weights should add up to 1.0.
            </summary>
            <param name="rwt">Red weight</param>
            <param name="gwt">Green weight</param>
            <param name="bwt">Blue weight</param>
            <returns>The Grayscale pix</returns>
            <exception cref="T:TesseractOCR.Exceptions.LeptonicaException">Raised when something fails</exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.ConvertRGBToGray">
            <summary>
                Conversion from RBG to 8bpp grayscale.
            </summary>
            <returns>The Grayscale pix.</returns>
        </member>
        <member name="M:TesseractOCR.Pix.Image.RemoveLines(System.Int32,System.Int32)">
            <summary>
                Removes horizontal lines from a grayscale image.
                The algorithm is based on Leptonica <code>lineremoval.c</code> example.
                See <a href="http://www.leptonica.com/line-removal.html">line-removal</a>.
            </summary>
            <param name="whiteTresh">Threshold value for white pixels.</param>
            <param name="blackTresh">Threshold value for black pixels.</param>
            <returns>Image with lines removed</returns>
            <exception cref="T:TesseractOCR.Exceptions.LeptonicaException">Raised when something fails</exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Despeckle(System.String,System.Int32)">
            <summary>
                Reduces speckle noise in image. The algorithm is based on Leptonica
                <code>speckle_reg.c</code> example demonstrating morphological method of
                removing speckle.
            </summary>
            <param name="selStr">hit-miss sels in 2D layout; SEL_STR2 and SEL_STR3 are predefined values</param>
            <param name="selSize">2 for 2x2, 3 for 3x3</param>
            <returns>Despeckled image</returns>
            <exception cref="T:TesseractOCR.Exceptions.LeptonicaException">Raised when something fails</exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Deskew">
            <summary>
                Determines the scew angle and if confidence is high enough returns the descewed image as the result, otherwise
                returns clone of original image.
            </summary>
            <remarks>
                This binarizes if necessary and finds the skew angle.  If the
                angle is large enough and there is sufficient confidence,
                it returns a deskewed image; otherwise, it returns a clone.
            </remarks>
            <returns>Returns deskewed image if confidence was high enough, otherwise returns clone of original pix</returns>
            <exception cref="T:TesseractOCR.Exceptions.LeptonicaException">Raised when something fails</exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Deskew(TesseractOCR.Scew@)">
            <summary>
                Determines the scew angle and if confidence is high enough returns the descewed image as the result, otherwise
                returns clone of original image
            </summary>
            <remarks>
                This binarizes if necessary and finds the skew angle.  If the
                angle is large enough and there is sufficient confidence,
                it returns a deskewed image; otherwise, it returns a clone.
            </remarks>
            <param name="scew">The scew angle and confidence</param>
            <returns>Returns deskewed image if confidence was high enough, otherwise returns clone of original pix</returns>
            <exception cref="T:TesseractOCR.Exceptions.LeptonicaException">Raised when something fails</exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Deskew(System.Int32,TesseractOCR.Scew@)">
            <summary>
                Determines the scew angle and if confidence is high enough returns the descewed image as the result, otherwise
                returns clone of original image
            </summary>
            <remarks>
                This binarizes if necessary and finds the skew angle.  If the
                angle is large enough and there is sufficient confidence,
                it returns a deskewed image; otherwise, it returns a clone
            </remarks>
            <param name="redSearch">The reduction factor used by the binary search, can be 1, 2, or .</param>
            <param name="scew">The scew angle and confidence</param>
            <returns>Returns deskewed image if confidence was high enough, otherwise returns clone of original pix</returns>
            <exception cref="T:TesseractOCR.Exceptions.LeptonicaException">Raised when something fails</exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Deskew(TesseractOCR.ScewSweep,System.Int32,System.Int32,TesseractOCR.Scew@)">
            <summary>
                Determines the scew angle and if confidence is high enough returns the descewed image as the result, otherwise
                returns clone of original image
            </summary>
            <remarks>
                This binarizes if necessary and finds the skew angle.  If the
                angle is large enough and there is sufficient confidence,
                it returns a deskewed image; otherwise, it returns a clone.
            </remarks>
            <param name="sweep">linear sweep parameters</param>
            <param name="redSearch">The reduction factor used by the binary search, can be 1, 2, or 4.</param>
            <param name="thresh">The threshold value used for binarizing the image.</param>
            <param name="scew">The scew angle and confidence</param>
            <returns>Returns deskewed image if confidence was high enough, otherwise returns clone of original pix</returns>
            <exception cref="T:TesseractOCR.Exceptions.LeptonicaException">Raised when something fails</exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Rotate(System.Single,TesseractOCR.Enums.RotationMethod,TesseractOCR.Enums.RotationFill,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Creates a new image by rotating this image about it's centre.
            </summary>
            <remarks>
                Please note the following:
                <list type="bullet">
                    <item>
                        Rotation will bring in either white or black pixels, as specified by <paramref name="fillColor" /> from
                        the outside as required.
                    </item>
                    <item>Above 20 degrees, sampling rotation will be used if shear was requested.</item>
                    <item>Colormaps are removed for rotation by area map and shear.</item>
                    <item>
                        The resulting image can be expanded so that no image pixels are lost. To invoke expansion,
                        input the original width and height. For repeated rotation, use of the original width and height allows
                        expansion to stop at the maximum required size which is a square of side = sqrt(w*w + h*h).
                    </item>
                </list>
                <para>
                    Please note there is an implicit assumption about RGB component ordering.
                </para>
            </remarks>
            <param name="angleInRadians">The angle to rotate by, in radians; clockwise is positive.</param>
            <param name="method">The rotation method to use.</param>
            <param name="fillColor">The fill color to use for pixels that are brought in from the outside.</param>
            <param name="width">The original width; use 0 to avoid embedding</param>
            <param name="height">The original height; use 0 to avoid embedding</param>
            <returns>The image rotated around it's centre</returns>
            <exception cref="T:TesseractOCR.Exceptions.LeptonicaException">Raised when something fails</exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Rotate90(TesseractOCR.Enums.RotationDirection)">
            <summary>
                90 degree rotation.
            </summary>
            <param name="direction">1 = clockwise,  -1 = counter-clockwise</param>
            <returns>Rotated image</returns>
            <exception cref="T:TesseractOCR.Exceptions.LeptonicaException">Raised when something fails</exception>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Blend(TesseractOCR.Pix.Image,System.Int32,System.Int32,System.Single)">
            <summary>
                Blends this image with the given <paramref name="imageToBlendWith"/>
            </summary>
            <param name="imageToBlendWith"><see cref="T:TesseractOCR.Pix.Image"/></param>
            <param name="x">origin [UL corner] of <paramref name="imageToBlendWith"/> relative to the origin of <see cref="T:TesseractOCR.Pix.Image"/> can be  is smaller 0</param>
            <param name="y">origin [UL corner] of <paramref name="imageToBlendWith"/> relative to the origin of <see cref="T:TesseractOCR.Pix.Image"/> can be  is smaller 0</param>
            <param name="fraction"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Pix.Image.Dispose(System.Boolean)">
            <summary>
                Disposes the <see cref="T:TesseractOCR.Pix.Image"/> object
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:TesseractOCR.Rect.Empty">
            <summary>
                Returns an empty <see cref="T:TesseractOCR.Rect"/>
            </summary>
        </member>
        <member name="M:TesseractOCR.Rect.Equals(System.Object)">
            <summary>
                Returns <c>true</c> when this object equals the given <paramref name="obj"/>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Rect.Equals(TesseractOCR.Rect)">
            <summary>
                Returns <c>true</c> when this object equals the <paramref name="other"/>
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Rect.GetHashCode">
            <summary>
                Returns a hash code for this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Rect.op_Equality(TesseractOCR.Rect,TesseractOCR.Rect)">
            <summary>
                Returns <c>true</c> when equal
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Rect.op_Inequality(TesseractOCR.Rect,TesseractOCR.Rect)">
            <summary>
                Returns <c>true</c> when not equal
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Rect.ToString">
            <summary>
                Returns a string interpretation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:TesseractOCR.Renderers.AggregateResult">
            <summary>
                Aggregate result renderer.
            </summary>
        </member>
        <member name="P:TesseractOCR.Renderers.AggregateResult.ResultRenderers">
            <summary>
                Get's the child result renderers.
            </summary>
        </member>
        <member name="P:TesseractOCR.Renderers.AggregateResult.PageNumber">
            <summary>
                Get's the current page number.
            </summary>
        </member>
        <member name="M:TesseractOCR.Renderers.AggregateResult.#ctor(TesseractOCR.Renderers.IResult[])">
            <summary>
                Create a new aggregate result renderer with the specified child result renderers.
            </summary>
            <param name="resultRenderers">The child result renderers.</param>
        </member>
        <member name="M:TesseractOCR.Renderers.AggregateResult.#ctor(System.Collections.Generic.IEnumerable{TesseractOCR.Renderers.IResult})">
            <summary>
                Create a new aggregate result renderer with the specified child result renderers.
            </summary>
            <param name="resultRenderers">The child result renderers.</param>
        </member>
        <member name="M:TesseractOCR.Renderers.AggregateResult.AddPage(TesseractOCR.Page)">
            <summary>
                Adds a page to each of the child result renderers.
            </summary>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Renderers.AggregateResult.BeginDocument(System.String)">
            <summary>
                Begins a new document with the specified title.
            </summary>
            <param name="title">The title of the document.</param>
            <returns></returns>
        </member>
        <member name="T:TesseractOCR.Renderers.AggregateResult.EndDocumentOnDispose">
            <summary>
                Ensures the renderer's EndDocument when disposed off.
            </summary>
        </member>
        <member name="T:TesseractOCR.Renderers.AltoResult">
            <summary>
                Renders the result in ALTO format
            </summary>
        </member>
        <member name="T:TesseractOCR.Renderers.BoxResult">
            <summary>
                Renders the result in BOX format
            </summary>
        </member>
        <member name="T:TesseractOCR.Renderers.HOcrResult">
            <summary>
                Renders the result in HOCR format
            </summary>
        </member>
        <member name="M:TesseractOCR.Renderers.IResult.BeginDocument(System.String)">
            <summary>
                Begins a new document with the specified <paramref name="title" />.
            </summary>
            <param name="title">The title of the new document.</param>
            <returns>A handle that when disposed of ends the current document.</returns>
        </member>
        <member name="M:TesseractOCR.Renderers.IResult.AddPage(TesseractOCR.Page)">
            <summary>
                Add the page to the current document.
            </summary>
            <param name="page"></param>
            <returns><c>True</c> if the page was successfully added to the result renderer; otherwise false.</returns>
        </member>
        <member name="P:TesseractOCR.Renderers.IResult.PageNumber">
            <summary>
                Gets the current page number; returning -1 if no page has yet been added otherwise the number
                of the last added page (starting from 0).
            </summary>
        </member>
        <member name="T:TesseractOCR.Renderers.LstmBoxResult">
            <summary>
                Renders the result in LSTM BOX format
            </summary>
        </member>
        <member name="T:TesseractOCR.Renderers.PdfResult">
            <summary>
                Renders the result in PDF format
            </summary>
        </member>
        <member name="T:TesseractOCR.Renderers.Result">
            <summary>
                Represents a native result renderer (e.g. text, pdf, etc).
            </summary>
            <remarks>
                Note that the ResultRenderer is explicitly responsible for managing the
                renderer hierarchy. This gets around a number of difficult issues such
                as keeping track of what the next renderer is and how to manage the memory.
            </remarks>
        </member>
        <member name="P:TesseractOCR.Renderers.Result.PageNumber">
            <summary>
                Returns the page number
            </summary>
        </member>
        <member name="M:TesseractOCR.Renderers.Result.AddPage(TesseractOCR.Page)">
            <summary>
                Add the page to the current document.
            </summary>
            <param name="page"></param>
            <returns><c>True</c> if the page was successfully added to the result renderer; otherwise false.</returns>
        </member>
        <member name="M:TesseractOCR.Renderers.Result.BeginDocument(System.String)">
            <summary>
                Begins a new document with the specified <paramref name="title" />.
            </summary>
            <param name="title">The (ANSI) title of the new document.</param>
            <returns>A handle that when disposed of ends the current document.</returns>
        </member>
        <member name="M:TesseractOCR.Renderers.Result.CreateRenderers(System.String,System.String,System.Collections.Generic.List{TesseractOCR.Enums.RenderFormat})">
            <summary>
                Creates renderers for specified output formats.
            </summary>
            <param name="outputbase"></param>
            <param name="dataPath">The directory containing the pdf font data, normally same as your tessdata directory.</param>
            <param name="outputFormats"></param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Renderers.Result.CreateTextRenderer(System.String)">
            <summary>
                Creates a <see cref="T:TesseractOCR.Renderers.IResult">result renderer</see> that render that generates UTF-8 encoded text
                file from tesseract's output.
            </summary>
            <param name="outputFilename">The path to the text file to be generated without the file extension.</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Renderers.Result.CreateHOcrRenderer(System.String,System.Boolean)">
            <summary>
                Creates a <see cref="T:TesseractOCR.Renderers.IResult">result renderer</see> that render that generates a HOCR
                file from tesseract's output.
            </summary>
            <param name="outputFilename">The path to the hocr file to be generated without the file extension.</param>
            <param name="fontInfo">Determines if the generated HOCR file includes font information or not.</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Renderers.Result.CreatePdfRenderer(System.String,System.String,System.Boolean)">
            <summary>
                Creates a <see cref="T:TesseractOCR.Renderers.IResult">result renderer</see> that render that generates a searchable
                pdf file from tesseract's output.
            </summary>
            <param name="outputFilename">The filename of the pdf file to be generated without the file extension.</param>
            <param name="fontDirectory">The directory containing the pdf font data, normally same as your tessdata directory.</param>
            <param name="textonly">skip images if set</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Renderers.Result.CreateUnlvRenderer(System.String)">
            <summary>
                Creates a <see cref="T:TesseractOCR.Renderers.IResult">result renderer</see> that render that generates a unlv
                file from tesseract's output.
            </summary>
            <param name="outputFilename">The path to the unlv file to be created without the file extension.</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Renderers.Result.CreateBoxRenderer(System.String)">
            <summary>
                Creates a <see cref="T:TesseractOCR.Renderers.IResult">result renderer</see> that render that generates a box text file from
                tesseract's output.
            </summary>
            <param name="outputFilename">The path to the box file to be created without the file extension.</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Renderers.Result.CreateAltoRenderer(System.String)">
            <summary>
                Creates a <see cref="T:TesseractOCR.Renderers.IResult">result renderer</see> that render that generates an Alto
                file from tesseract's output.
            </summary>
            <param name="outputFilename">The path to the Alto file to be created without the file extension.</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Renderers.Result.CreateTsvRenderer(System.String)">
            <summary>
                Creates a <see cref="T:TesseractOCR.Renderers.IResult">result renderer</see> that render that generates a Tsv
                file from tesseract's output.
            </summary>
            <param name="outputFilename">The path to the Tsv file to be created without the file extension.</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Renderers.Result.CreateLstmBoxRenderer(System.String)">
            <summary>
                Creates a <see cref="T:TesseractOCR.Renderers.IResult">result renderer</see> that render that generates a box
                file from tesseract's output.
            </summary>
            <param name="outputFilename">The path to the unlv file to be created without the file extension.</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Renderers.Result.CreateWordStrBoxRenderer(System.String)">
            <summary>
                Creates a <see cref="T:TesseractOCR.Renderers.IResult">result renderer</see> that render that generates a unlv
                file from tesseract's output.
            </summary>
            <param name="outputFilename">The path to the unlv file to be created without the file extension.</param>
            <returns></returns>
        </member>
        <member name="M:TesseractOCR.Renderers.Result.Initialize(System.IntPtr)">
            <summary>
                Initialize the render to use the specified native result renderer.
            </summary>
            <param name="handle"></param>
        </member>
        <member name="T:TesseractOCR.Renderers.Result.EndDocumentOnDispose">
            <summary>
                Ensures the renderer's EndDocument when disposed off.
            </summary>
        </member>
        <member name="T:TesseractOCR.Renderers.TextResult">
            <summary>
                Renders the result as Text
            </summary>
        </member>
        <member name="T:TesseractOCR.Renderers.TsvResult">
            <summary>
                Renders the result in TSV format
            </summary>
        </member>
        <member name="T:TesseractOCR.Renderers.UnlvResult">
            <summary>
                Renders the result in UNLV format
            </summary>
        </member>
        <member name="T:TesseractOCR.Renderers.WordStrBoxResult">
            <summary>
                Renders the result in WORD STRING BOX format
            </summary>
        </member>
        <member name="T:TesseractOCR.ScewSweep">
            <summary>
                Represents the parameters for a sweep search used by scew algorithms
            </summary>
        </member>
    </members>
</doc>
